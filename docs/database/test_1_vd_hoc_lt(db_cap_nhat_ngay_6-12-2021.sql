-- phpMyAdmin SQL Dump
-- version 5.0.2
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1:3306
-- Generation Time: Dec 06, 2021 at 02:16 PM
-- Server version: 8.0.21
-- PHP Version: 7.3.21

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `test_1_vd_hoc_lt`
--

DELIMITER $$
--
-- Procedures
--
DROP PROCEDURE IF EXISTS `getCommentInPost`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getCommentInPost` (IN `idPost` INT, IN `vtbd` INT, IN `sodong` INT)  BEGIN

select `id_comment` as `id`, `comment_content` as `content`, `comment_date_comment` as `date`,  comments.`id_user`, `user_name` as `name`, `user_display_name` as `dp_name`, `user_image` as `img` from comments LEFT JOIN userr on comments.`id_user` = userr.`id_user` WHERE `id_post` = idPost ORDER BY `id_comment` DESC LIMIT vtbd,sodong ;

END$$

DROP PROCEDURE IF EXISTS `getInfoUserPost`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getInfoUserPost` (IN `idUser` INT)  BEGIN

SELECT `id`, `name`, `dp_name`, `img`, `post`, `question`, COUNT(comments.`id_comment`) as `comment` from (SELECT `id`, `name`, `dp_name`,`img`, `post`, COUNT(question.`id_question`) as `question` from (select `id`, `name`, `dp_name`, `img`, COUNT(post.`id_post`) as `post` from (select `id_user` as `id`, `user_name` as `name`, `user_display_name` as `dp_name`, `user_image` as `img` from userr WHERE `id_user` = idUser)as A  LEFT JOIN post on A.`id` = post.`id_user` GROUP BY `id` ) as B LEFT JOIN question on B.`id` = question.`id_user` GROUP BY `id`) as C LEFT JOIN comments on C.`id` = comments.`id_user` GROUP BY `id`;

END$$

DROP PROCEDURE IF EXISTS `getListPostByPage`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getListPostByPage` (IN `vtbd` INT, IN `sodong` INT)  BEGIN
  select * from (select `id_post`, `post_title`, `post_content`, `post_date_created`, `post_views`, `id_user`, `user_name`, `user_display_name`, `user_image` , topic.`id_topic`, `topic_name`, `slComment`, `slLikes` from (select `id_post`, `id_topic`, `post_title`, `post_content`, `post_date_created`, `post_views`, `id_user`, `user_name`, `user_display_name`, `user_image` , `slComment`, COUNT(`id`) as `slLikes` from (select C.`id_post`, `id_topic`, `post_title`, `post_content`, `post_date_created`, `post_views`, C.`id_user`, `user_name`, `user_display_name`, `user_image` , `slComment`, likes.`id_post` as `id` from (select `id_post`, `id_topic`, `post_title`, `post_content`, `post_date_created`, `post_views`, `id_user`, `user_name`, `user_display_name`, `user_image` , COUNT(`id`) as `slComment` from (select  A.`id_post`, `id_topic`, `post_title`, `post_content`, `post_date_created`, `post_views`, A.`id_user`, `user_name`, `user_display_name`, `user_image` , comments.`id_post` as `id` from (select `id_post`, `id_topic`, `post_title`, `post_content`, `post_date_created`, `post_views`, post.`id_user`, `user_name`, `user_display_name`, `user_image` FROM post, userr WHERE post.`id_user` = userr.`id_user`) as A LEFT JOIN comments on A.`id_post` = comments.`id_post`) as B GROUP BY `id_post`) as C LEFT JOIN likes on C.`id_post` = likes.`id_post`) as D GROUP BY `id_post`) as E, topic WHERE E.`id_topic` = topic.`id_topic` ORDER By `id_post` DESC)as F LIMIT vtbd,sodong;
  END$$

DROP PROCEDURE IF EXISTS `getListPostByView`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getListPostByView` (IN `vtbd` INT, IN `sodong` INT)  BEGIN
  select * from (select `id_post`, `post_title`, `post_content`, `post_date_created`, `post_views`, `id_user`, `user_name`, `user_display_name`, `user_image` , topic.`id_topic`, `topic_name`, `slComment`, `slLikes` from (select `id_post`, `id_topic`, `post_title`, `post_content`, `post_date_created`, `post_views`, `id_user`, `user_name`, `user_display_name`, `user_image` , `slComment`, COUNT(`id`) as `slLikes` from (select C.`id_post`, `id_topic`, `post_title`, `post_content`, `post_date_created`, `post_views`, C.`id_user`, `user_name`, `user_display_name`, `user_image` , `slComment`, likes.`id_post` as `id` from (select `id_post`, `id_topic`, `post_title`, `post_content`, `post_date_created`, `post_views`, `id_user`, `user_name`, `user_display_name`, `user_image` , COUNT(`id`) as `slComment` from (select  A.`id_post`, `id_topic`, `post_title`, `post_content`, `post_date_created`, `post_views`, A.`id_user`, `user_name`, `user_display_name`, `user_image` , comments.`id_post` as `id` from (select `id_post`, `id_topic`, `post_title`, `post_content`, `post_date_created`, `post_views`, post.`id_user`, `user_name`, `user_display_name`, `user_image` FROM post, userr WHERE post.`id_user` = userr.`id_user`) as A LEFT JOIN comments on A.`id_post` = comments.`id_post`) as B GROUP BY `id_post`) as C LEFT JOIN likes on C.`id_post` = likes.`id_post`) as D GROUP BY `id_post`) as E, topic WHERE E.`id_topic` = topic.`id_topic` ORDER By `post_views` DESC)as F LIMIT vtbd,sodong;
  END$$

DROP PROCEDURE IF EXISTS `getListQuestion`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getListQuestion` ()  BEGIN
SELECT  `id_question` as `id`,`question_title` as `title`, `question_date_created` as `date`, `question_views` as `views`, `user_name` as `nameTK`, `user_display_name` as `displayName`, COUNT(`id`) as `slTraLoi`  from (SELECT  A.`id_question`, `question_title`, `question_date_created`, `question_views`, `user_name`, `user_display_name`, comments.`id_question` as `id`  from (SELECT question.`id_question`, `question_title`, `question_date_created`, `question_views`, userr.`user_name`, `user_display_name` FROM question, userr WHERE question.`id_user` = userr.`id_user`) as A LEFT JOIN comments on A.`id_question` = comments.`id_question`) as B GROUP BY `id_question` ORDER BY `id_question` DESC;
END$$

DROP PROCEDURE IF EXISTS `getPostDetails`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getPostDetails` (IN `idPost` INT)  BEGIN

select `id_post`, `post_title`, `post_content`, `post_date_created`, `post_views`, `id_user`, topic.`id_topic`, `topic_name`, `slComment`, `slLikes` 
from (select `id_post`, `id_topic`, `post_title`, `post_content`, `post_date_created`, `post_views`, `id_user`, `slComment`, COUNT(`id`) as `slLikes` 
      from (select C.`id_post`, `id_topic`, `post_title`, `post_content`, `post_date_created`, `post_views`, C.`id_user`, `slComment`, likes.`id_post` as `id` 
            from (select `id_post`, `id_topic`, `post_title`, `post_content`, `post_date_created`, `post_views`, `id_user`, COUNT(`id`) as `slComment` 
                  from (select  A.`id_post`, `id_topic`, `post_title`, `post_content`, `post_date_created`, `post_views`, A.`id_user` , comments.`id_post` as `id`
                        from (select `id_post`, `id_topic`, `post_title`, `post_content`, `post_date_created`, `post_views`, `id_user` 
                              FROM post WHERE `id_post` = idPost) as A LEFT JOIN comments on A.`id_post` = comments.`id_post`) as B GROUP BY `id_post`) as C LEFT JOIN likes on C.`id_post` = likes.`id_post`) as D GROUP BY `id_post`) as E, topic WHERE E.`id_topic` = topic.`id_topic`;

END$$

DROP PROCEDURE IF EXISTS `getTopPost`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getTopPost` ()  BEGIN
select * from (select `id_post`, `post_title`, `post_views`, `id_user`, `user_name`, `user_display_name`, `user_image` , topic.`id_topic`, `topic_name`, `slComment`, `slLikes` from (select `id_post`, `id_topic`, `post_title`, `post_views`, `id_user`, `user_name`, `user_display_name`, `user_image` , `slComment`, COUNT(`id`) as `slLikes` from (select C.`id_post`, `id_topic`, `post_title`,  `post_views`, C.`id_user`, `user_name`, `user_display_name`, `user_image` , `slComment`, likes.`id_post` as `id` from (select `id_post`, `id_topic`, `post_title`, `post_views`, `id_user`, `user_name`, `user_display_name`, `user_image` , COUNT(`id`) as `slComment` from (select  A.`id_post`, `id_topic`, `post_title`, `post_views`, A.`id_user`, `user_name`, `user_display_name`, `user_image` , comments.`id_post` as `id` from (select `id_post`, `id_topic`, `post_title`, `post_views`, post.`id_user`, `user_name`, `user_display_name`, `user_image` FROM post, userr WHERE post.`id_user` = userr.`id_user`) as A LEFT JOIN comments on A.`id_post` = comments.`id_post`) as B GROUP BY `id_post`) as C LEFT JOIN likes on C.`id_post` = likes.`id_post`) as D GROUP BY `id_post`) as E, topic WHERE E.`id_topic` = topic.`id_topic` ORDER By `post_views` DESC)as F LIMIT 0,6;
  END$$

DROP PROCEDURE IF EXISTS `getTopQuestion`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getTopQuestion` ()  BEGIN
SELECT `id`, `title`, `slTraLoi`, `views` FROM (SELECT  `id_question` as `id`,`question_title` as `title`, `question_views` as `views`, COUNT(`id`) as `slTraLoi`  from (SELECT  A.`id_question`, `question_title`, `question_views`, comments.`id_question` as `id`  from (SELECT question.`id_question`, `question_title`, `question_views` FROM question) as A LEFT JOIN comments on A.`id_question` = comments.`id_question`) as B GROUP BY `id_question` ORDER BY `id_question` DESC) as C LIMIT 0,6;
END$$

DROP PROCEDURE IF EXISTS `getYourPostPage`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getYourPostPage` (IN `vtbd` INT, IN `sodong` INT, IN `iduser` INT)  BEGIN
  select * from (select `id_post`, `post_title`, `post_content`, `post_date_created`, `post_views`, `id_user`, `user_name`, `user_display_name`, `user_image` , topic.`id_topic`, `topic_name`, `slComment`, `slLikes` from (select `id_post`, `id_topic`, `post_title`, `post_content`, `post_date_created`, `post_views`, `id_user`, `user_name`, `user_display_name`, `user_image` , `slComment`, COUNT(`id`) as `slLikes` from (select C.`id_post`, `id_topic`, `post_title`, `post_content`, `post_date_created`, `post_views`, C.`id_user`, `user_name`, `user_display_name`, `user_image` , `slComment`, likes.`id_post` as `id` from (select `id_post`, `id_topic`, `post_title`, `post_content`, `post_date_created`, `post_views`, `id_user`, `user_name`, `user_display_name`, `user_image` , COUNT(`id`) as `slComment` from (select  A.`id_post`, `id_topic`, `post_title`, `post_content`, `post_date_created`, `post_views`, A.`id_user`, `user_name`, `user_display_name`, `user_image` , comments.`id_post` as `id` from (select `id_post`, `id_topic`, `post_title`, `post_content`, `post_date_created`, `post_views`, post.`id_user`, `user_name`, `user_display_name`, `user_image` FROM post, userr WHERE userr.`id_user`=iduser and post.`id_user` = userr.`id_user`) as A LEFT JOIN comments on A.`id_post` = comments.`id_post`) as B GROUP BY `id_post`) as C LEFT JOIN likes on C.`id_post` = likes.`id_post`) as D GROUP BY `id_post`) as E, topic WHERE E.`id_topic` = topic.`id_topic` ORDER By `id_post` DESC)as F LIMIT vtbd,sodong;
  END$$

DROP PROCEDURE IF EXISTS `getYourPostView`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getYourPostView` (IN `vtbd` INT, IN `sodong` INT, IN `iduser` INT)  BEGIN
  select * from (select `id_post`, `post_title`, `post_content`, `post_date_created`, `post_views`, `id_user`, `user_name`, `user_display_name`, `user_image` , topic.`id_topic`, `topic_name`, `slComment`, `slLikes` from (select `id_post`, `id_topic`, `post_title`, `post_content`, `post_date_created`, `post_views`, `id_user`, `user_name`, `user_display_name`, `user_image` , `slComment`, COUNT(`id`) as `slLikes` from (select C.`id_post`, `id_topic`, `post_title`, `post_content`, `post_date_created`, `post_views`, C.`id_user`, `user_name`, `user_display_name`, `user_image` , `slComment`, likes.`id_post` as `id` from (select `id_post`, `id_topic`, `post_title`, `post_content`, `post_date_created`, `post_views`, `id_user`, `user_name`, `user_display_name`, `user_image` , COUNT(`id`) as `slComment` from (select  A.`id_post`, `id_topic`, `post_title`, `post_content`, `post_date_created`, `post_views`, A.`id_user`, `user_name`, `user_display_name`, `user_image` , comments.`id_post` as `id` from (select `id_post`, `id_topic`, `post_title`, `post_content`, `post_date_created`, `post_views`, post.`id_user`, `user_name`, `user_display_name`, `user_image` FROM post, userr WHERE userr.`id_user` = iduser and post.`id_user` = userr.`id_user`) as A LEFT JOIN comments on A.`id_post` = comments.`id_post`) as B GROUP BY `id_post`) as C LEFT JOIN likes on C.`id_post` = likes.`id_post`) as D GROUP BY `id_post`) as E, topic WHERE E.`id_topic` = topic.`id_topic` ORDER By `post_views` DESC)as F LIMIT vtbd,sodong;

  END$$

DELIMITER ;

-- --------------------------------------------------------

--
-- Table structure for table `comments`
--

DROP TABLE IF EXISTS `comments`;
CREATE TABLE IF NOT EXISTS `comments` (
  `id_comment` int NOT NULL AUTO_INCREMENT,
  `id_user` int DEFAULT NULL,
  `id_post` int DEFAULT NULL,
  `id_question` int DEFAULT NULL,
  `comment_content` text CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,
  `comment_date_comment` datetime NOT NULL,
  PRIMARY KEY (`id_comment`),
  KEY `id_user` (`id_user`),
  KEY `id_post` (`id_post`),
  KEY `id_question` (`id_question`)
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `comments`
--

INSERT INTO `comments` (`id_comment`, `id_user`, `id_post`, `id_question`, `comment_content`, `comment_date_comment`) VALUES
(1, 13, NULL, 1, 'Mọi người giúp em với', '2021-10-30 16:57:26'),
(2, 1, NULL, 1, 'mình không biét nhá :v', '2021-10-30 16:57:26'),
(3, 1, NULL, 2, 'Ai vào giúp bạn này nào :v', '2021-10-30 16:58:53'),
(4, 1, 1, NULL, 'hihihi', '2021-11-08 14:54:28'),
(5, 13, 15, NULL, 'huhuhu', '2021-11-08 14:54:28'),
(8, 13, 15, NULL, 'Hahaha', '2021-11-19 07:31:41'),
(9, 13, 15, NULL, 'ôi không thể nào', '2021-11-19 07:32:45'),
(16, 13, 15, NULL, 'Không thể nào', '2021-11-19 07:43:23'),
(17, 13, 15, NULL, 'Tại sao lại như vậy', '2021-11-19 07:43:52'),
(18, 1, 15, NULL, 'ôi thật là đẹp', '2021-11-19 07:50:09'),
(19, 13, 16, NULL, 'Ôi không', '2021-11-22 02:59:52');

-- --------------------------------------------------------

--
-- Table structure for table `likes`
--

DROP TABLE IF EXISTS `likes`;
CREATE TABLE IF NOT EXISTS `likes` (
  `id_like` int NOT NULL AUTO_INCREMENT,
  `id_user` int DEFAULT NULL,
  `id_post` int DEFAULT NULL,
  `id_question` int DEFAULT NULL,
  PRIMARY KEY (`id_like`),
  KEY `id_user` (`id_user`),
  KEY `id_post` (`id_post`),
  KEY `id_question` (`id_question`)
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `likes`
--

INSERT INTO `likes` (`id_like`, `id_user`, `id_post`, `id_question`) VALUES
(11, 1, 13, NULL),
(12, 13, 8, NULL),
(13, 13, 16, NULL),
(14, 13, 16, NULL),
(15, 1, 17, NULL);

-- --------------------------------------------------------

--
-- Table structure for table `post`
--

DROP TABLE IF EXISTS `post`;
CREATE TABLE IF NOT EXISTS `post` (
  `source_code` text CHARACTER SET utf8 COLLATE utf8_unicode_ci,
  `id_post` int NOT NULL AUTO_INCREMENT,
  `id_topic` int DEFAULT NULL,
  `id_user` int DEFAULT NULL,
  `post_title` varchar(100) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,
  `post_content` text CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,
  `post_date_created` datetime NOT NULL,
  `post_views` int NOT NULL DEFAULT '0',
  PRIMARY KEY (`id_post`),
  KEY `id_topic` (`id_topic`),
  KEY `id_user` (`id_user`)
) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `post`
--

INSERT INTO `post` (`source_code`, `id_post`, `id_topic`, `id_user`, `post_title`, `post_content`, `post_date_created`, `post_views`) VALUES
('public\\user\\admin\\source\\admin_post1.c', 1, 1, 1, 'Cài công cụ để lập trình C', 'Cài đặt IDE để biên dịch và thực thi C\r\nCó một số IDE có sẵn và miễn phí để biên dịch và thực thi các chương trình C. Bạn có thể chọn Dev-C++, Code:: Blocks, hoặc Turbo C. Tuy nhiên, lựa chọn phổ biến nhất và hay được sử dụng nhất là Dev-C++ và các chương trình C trong loạt bài này cũng được biên dịch và thực thi trong Dev-C++.\r\n\r\nBạn truy cập theo link sau để tải Dev-C++: Tải Dev-C++. Trên trang này cũng bao gồm cả Code:: Blocks. Sau khi bạn tải xong, để cài đặt IDE này, bạn chỉ cần vào Google và gõ \"cài đặt dev-c++\" là có rất nhiều video hướng dẫn chi tiết, cho nên mình không cần trình bày thêm nữa.\r\n\r\nSau khi đã cài đặt xong, để biên dịch và thực thi một chương trình C, bạn: (a) vào File -> New -> Project -> Console Application -> C project, sau đó nhập tên vào hoặc (b) File -> New -> Source File. Cuối cùng, sao chép và dán chương trình C vào file bạn vừa tạo. Để biên dịch và thực thi, chọn Execute -> Compile & Run.\r\n\r\nCài đặt để chạy trên Command Prompt\r\nNếu bạn muốn cài đặt để biên dịch và chạy trên Command Prompt, thì bạn nên đọc phần sau đây.\r\n\r\nNếu bạn đang muốn cài đặt chương trình C, bạn cần phải sử dụng 2 phần mềm trên máy tính của bạn: (a) Chương trình soạn văn bản - Text Editor và (b) Bộ biên dịch C.\r\n\r\nText Editor\r\nĐược sử dụng để soạn thảo các chương trình. Ví dụ về một vài trình editor như Window Notepad, Notepad ++, vim hay vi…\r\n\r\nTên và các phiên bản của các trình editor có thể thay đổi theo các hệ điều hành. Ví dụ, Notepad được sử dụng trên Windows, hoặc vim hay vi được sử dụng trên Linux hoặc UNIX.\r\n\r\nCác file bạn tạo trong trình editor được gọi là source file (file nguồn) và chứa các chương trình code. Các file trong chương trình C thường được đặt tên với phần mở rộng \".c\".\r\n\r\nTrước khi bắt đầu chương trình của bạn, hãy chắc chắn bạn có một trình editor trên máy tính và bạn có đủ kinh nghiệm để viết các chương trình máy tính, lưu trữ trong file và thực thi nó.\r\n\r\nBộ biên dịch C\r\nMã nguồn được viết trong file nguồn dưới dạng có thể đọc được. Nó sẽ được biên dịch thành mã máy, để cho CPU có thể thực hiện các chương trình này dựa trên các lệnh được viết.\r\n\r\nBộ biên dịch được sử dụng để biên dịch mã nguồn (source code) của bạn đến chương trình có thể thực thi. Tôi giả sử bạn có kiến thức cơ bản về một bộ biên dịch ngôn ngữ lập trình.\r\n\r\nBộ biên dịch thông dụng nhất là bộ biên dịch GNU C/C++, mặt khác bạn có thể có các bộ biên dịch khác như HP hoặc Solaris với Hệ điều hành tương ứng.\r\n\r\nDưới đây là phần hướng dẫn giúp bạn cách cài đặt bộ biên dich GNU C/C++ trên các hệ điều hành khác nhau. Tôi đang đề cập đến C/C++ bởi vì bộ biên dịch GNU gcc hoạt động cho cả ngôn ngữ C và C++.\r\n\r\nCài đặt trên môi trường UNIX/Linux\r\nNếu bạn đang sử dụng Linux hoặc UNIX, bạn có thể kiểm tra bộ GCC đã được cài đặt trên môi trường của bạn chưa bằng lệnh sau đây:\r\n\r\n$ gcc -v\r\nNếu bạn có bộ cài đặt GNU trên máy tính của bạn, sau đó nó sẽ phản hồi một thông báo sau:\r\n\r\nUsing built-in specs.\r\nTarget: i386-redhat-linux\r\nConfigured with: ../configure --prefix=/usr .......\r\nThread model: posix\r\ngcc version 4.1.2 20080704 (Red Hat 4.1.2-46)\r\nNếu bộ GCC chưa được cài đặt, bạn có thể cài đặt nó với hướng dẫn trên đường link dưới đây: http://gcc.gnu.org/install/\r\n\r\nBài hướng dẫn này được viết dựa trên Linux và tất cả các ví dụ dược biên dịch trên Cent OS của hệ thống Linux.\r\n\r\nCài đặt trên môi trường Mac OS\r\nNếu bạn sử dụng hệ điều hành Mac OS X, cách đơn giản nhất để có GCC là download môi trường phát triển Xcode, bạn có thể sử dụng bộ biên dịch GNU cho C/C++.\r\n\r\nXcode được sẵn dưới link sau: developer.apple.com/technologies/tools/.\r\n\r\nCài đặt trên Windows\r\nĐể cài đặt GCC trên Windows bạn cần phải cài đặt MinGW. Để cài đặt MinGW, bạn truy cập vào www.mingw.org, và theo hướng dẫn trên trang download này. Download phiên bản mới nhất cho chương trình MinGW, dưới tên MinGW-<version>.exe.\r\n\r\nKhi cài đặt MinWG, ít nhất bạn phải cài đặt gcc-core, gcc-g++, binutils và MinGW runtime, nhưng bạn có thể cài đặt nhiều hơn.\r\n\r\nThêm thư mục con bin trong nơi cài đặt MinGW vào biến môi trường PATH của bạn, bạn có thể sử dụng trực tiếp các công cụ dưới dạng command line một các dễ dàng.\r\n\r\nKhi quá trình cài đặt hoàn tất, bạn có thể chạy gcc, g++, ar, ranlib, dlltool và các công cụ GNU khác trên Windows command line.', '2021-11-07 14:42:44', 0),
(NULL, 2, 1, 1, 'Cấu trúc chương trình C', 'Trước khi chúng ta nghiên cứu về các khối tạo nên một chương trình C, đầu tiên bạn hãy xem một chương trình C mẫu.\r\n\r\nChương trình C: Hello World\r\nMột chương trình C bao gồm những phần sau đây:\r\n\r\nCác lệnh tiền xử lý\r\n\r\nCác hàm\r\n\r\nCác biến\r\n\r\nCác lệnh và biểu thức\r\n\r\nCác comment\r\n\r\nĐầu tiên hãy xem đoạn code đơn giản mà sẽ in ra màn hình hai từ \"Hello World\":\r\n\r\n#include <stdio.h>\r\n\r\nint main()\r\n{\r\n   /* Day la chuong trinh C dau tien */\r\n   printf(\"Hello, World! \\n\");\r\n   \r\n   return 0;\r\n}\r\nHãy xem các phần của chương trình bên trên:\r\n\r\nDòng đầu tiên của chương trình #include <stdio.h> là lệnh tiền xử lý, nhắc nhở bộ biên dịch C thêm tệp stdio.h trước khi biên dịch.\r\n\r\nDòng tiếp theo int main() là hàm main, nơi chương trình bắt đầu.\r\n\r\nDòng tiếp theo /*...*/ là dòng comment được bỏ qua bởi bộ biên dịch compiler và được dùng để thêm các chú thích cho chương trình. Đây được gọi là phần comment của chương trình.\r\n\r\nDòng tiếp theo printf(...) là một hàm chức năng khác của ngôn ngữ C , in ra thông điệp \"Hello, World!\" hiển thị trên màn hình.\r\n\r\nDòng tiếp theo return 0; kết thúc hàm chính và trả về giá trị 0.\r\n\r\nBiên dịch & Thực thi Chương trình C\r\n1. Nếu bạn sử dụng Dev-C++, Microsoft Visual Studio, ... thì bạn mở ứng dụng, vào File, chọn New để tạo một source file mới. Sau đó sao chép code trên vào source file mới này. Với Dev-C++, bạn sử dụng Complile & Run để biên dịch và chạy chương trình. Với Microsoft Visual Studio, bạn thực hiện tương tự và sau đó sử dụng Build để biên dịch và thực thi.\r\n\r\n2. Nếu bạn dùng command prompt để biên dịch, bạn theo các bước sau:\r\n\r\nMở một trình editor và thêm dòng code ở trên.\r\n\r\nLưu tệp dưới dạng hello.c\r\n\r\nMở dòng nhắc lệnh và đi tới thư mục lưu trữ file.\r\n\r\nSoạn thảo gcc hello.c và nhấn Enter để biên dịch dòng code trên.\r\n\r\nNếu không có lỗi trên đoạn code bên trên, dòng nhắc lệnh sẽ đưa bạn đến dòng tiếp theo và tạo ra file a.out có thể thực thi.\r\n\r\nBây giờ, soạn thảo a.out để thực hiện chương trình này.\r\n\r\nBây giờ bạn sẽ thấy dòng chữ \"Hello, World\" được in trên màn hình.\r\n\r\n$ gcc hello.c\r\n$ ./a.out\r\nHello, World!\r\nBạn phải chắc chắn bộ biên dịch gcc được cài đặt trên máy tính của bạn và bạn đang chạy nó trong thư mục chứa file nguồn hello.c.', '2021-11-08 14:42:44', 0),
('public\\user\\admin\\source\\admin_post1.c', 3, 1, 1, 'Cài công cụ để lập trình C', 'Cài đặt IDE để biên dịch và thực thi C\r\nCó một số IDE có sẵn và miễn phí để biên dịch và thực thi các chương trình C. Bạn có thể chọn Dev-C++, Code:: Blocks, hoặc Turbo C. Tuy nhiên, lựa chọn phổ biến nhất và hay được sử dụng nhất là Dev-C++ và các chương trình C trong loạt bài này cũng được biên dịch và thực thi trong Dev-C++.\r\n\r\nBạn truy cập theo link sau để tải Dev-C++: Tải Dev-C++. Trên trang này cũng bao gồm cả Code:: Blocks. Sau khi bạn tải xong, để cài đặt IDE này, bạn chỉ cần vào Google và gõ \"cài đặt dev-c++\" là có rất nhiều video hướng dẫn chi tiết, cho nên mình không cần trình bày thêm nữa.\r\n\r\nSau khi đã cài đặt xong, để biên dịch và thực thi một chương trình C, bạn: (a) vào File -> New -> Project -> Console Application -> C project, sau đó nhập tên vào hoặc (b) File -> New -> Source File. Cuối cùng, sao chép và dán chương trình C vào file bạn vừa tạo. Để biên dịch và thực thi, chọn Execute -> Compile & Run.\r\n\r\nCài đặt để chạy trên Command Prompt\r\nNếu bạn muốn cài đặt để biên dịch và chạy trên Command Prompt, thì bạn nên đọc phần sau đây.\r\n\r\nNếu bạn đang muốn cài đặt chương trình C, bạn cần phải sử dụng 2 phần mềm trên máy tính của bạn: (a) Chương trình soạn văn bản - Text Editor và (b) Bộ biên dịch C.\r\n\r\nText Editor\r\nĐược sử dụng để soạn thảo các chương trình. Ví dụ về một vài trình editor như Window Notepad, Notepad ++, vim hay vi…\r\n\r\nTên và các phiên bản của các trình editor có thể thay đổi theo các hệ điều hành. Ví dụ, Notepad được sử dụng trên Windows, hoặc vim hay vi được sử dụng trên Linux hoặc UNIX.\r\n\r\nCác file bạn tạo trong trình editor được gọi là source file (file nguồn) và chứa các chương trình code. Các file trong chương trình C thường được đặt tên với phần mở rộng \".c\".\r\n\r\nTrước khi bắt đầu chương trình của bạn, hãy chắc chắn bạn có một trình editor trên máy tính và bạn có đủ kinh nghiệm để viết các chương trình máy tính, lưu trữ trong file và thực thi nó.\r\n\r\nBộ biên dịch C\r\nMã nguồn được viết trong file nguồn dưới dạng có thể đọc được. Nó sẽ được biên dịch thành mã máy, để cho CPU có thể thực hiện các chương trình này dựa trên các lệnh được viết.\r\n\r\nBộ biên dịch được sử dụng để biên dịch mã nguồn (source code) của bạn đến chương trình có thể thực thi. Tôi giả sử bạn có kiến thức cơ bản về một bộ biên dịch ngôn ngữ lập trình.\r\n\r\nBộ biên dịch thông dụng nhất là bộ biên dịch GNU C/C++, mặt khác bạn có thể có các bộ biên dịch khác như HP hoặc Solaris với Hệ điều hành tương ứng.\r\n\r\nDưới đây là phần hướng dẫn giúp bạn cách cài đặt bộ biên dich GNU C/C++ trên các hệ điều hành khác nhau. Tôi đang đề cập đến C/C++ bởi vì bộ biên dịch GNU gcc hoạt động cho cả ngôn ngữ C và C++.\r\n\r\nCài đặt trên môi trường UNIX/Linux\r\nNếu bạn đang sử dụng Linux hoặc UNIX, bạn có thể kiểm tra bộ GCC đã được cài đặt trên môi trường của bạn chưa bằng lệnh sau đây:\r\n\r\n$ gcc -v\r\nNếu bạn có bộ cài đặt GNU trên máy tính của bạn, sau đó nó sẽ phản hồi một thông báo sau:\r\n\r\nUsing built-in specs.\r\nTarget: i386-redhat-linux\r\nConfigured with: ../configure --prefix=/usr .......\r\nThread model: posix\r\ngcc version 4.1.2 20080704 (Red Hat 4.1.2-46)\r\nNếu bộ GCC chưa được cài đặt, bạn có thể cài đặt nó với hướng dẫn trên đường link dưới đây: http://gcc.gnu.org/install/\r\n\r\nBài hướng dẫn này được viết dựa trên Linux và tất cả các ví dụ dược biên dịch trên Cent OS của hệ thống Linux.\r\n\r\nCài đặt trên môi trường Mac OS\r\nNếu bạn sử dụng hệ điều hành Mac OS X, cách đơn giản nhất để có GCC là download môi trường phát triển Xcode, bạn có thể sử dụng bộ biên dịch GNU cho C/C++.\r\n\r\nXcode được sẵn dưới link sau: developer.apple.com/technologies/tools/.\r\n\r\nCài đặt trên Windows\r\nĐể cài đặt GCC trên Windows bạn cần phải cài đặt MinGW. Để cài đặt MinGW, bạn truy cập vào www.mingw.org, và theo hướng dẫn trên trang download này. Download phiên bản mới nhất cho chương trình MinGW, dưới tên MinGW-<version>.exe.\r\n\r\nKhi cài đặt MinWG, ít nhất bạn phải cài đặt gcc-core, gcc-g++, binutils và MinGW runtime, nhưng bạn có thể cài đặt nhiều hơn.\r\n\r\nThêm thư mục con bin trong nơi cài đặt MinGW vào biến môi trường PATH của bạn, bạn có thể sử dụng trực tiếp các công cụ dưới dạng command line một các dễ dàng.\r\n\r\nKhi quá trình cài đặt hoàn tất, bạn có thể chạy gcc, g++, ar, ranlib, dlltool và các công cụ GNU khác trên Windows command line.', '2021-11-07 14:42:44', 10),
(NULL, 4, 1, 1, 'Cấu trúc chương trình C', 'Trước khi chúng ta nghiên cứu về các khối tạo nên một chương trình C, đầu tiên bạn hãy xem một chương trình C mẫu.\r\n\r\nChương trình C: Hello World\r\nMột chương trình C bao gồm những phần sau đây:\r\n\r\nCác lệnh tiền xử lý\r\n\r\nCác hàm\r\n\r\nCác biến\r\n\r\nCác lệnh và biểu thức\r\n\r\nCác comment\r\n\r\nĐầu tiên hãy xem đoạn code đơn giản mà sẽ in ra màn hình hai từ \"Hello World\":\r\n\r\n#include <stdio.h>\r\n\r\nint main()\r\n{\r\n   /* Day la chuong trinh C dau tien */\r\n   printf(\"Hello, World! \\n\");\r\n   \r\n   return 0;\r\n}\r\nHãy xem các phần của chương trình bên trên:\r\n\r\nDòng đầu tiên của chương trình #include <stdio.h> là lệnh tiền xử lý, nhắc nhở bộ biên dịch C thêm tệp stdio.h trước khi biên dịch.\r\n\r\nDòng tiếp theo int main() là hàm main, nơi chương trình bắt đầu.\r\n\r\nDòng tiếp theo /*...*/ là dòng comment được bỏ qua bởi bộ biên dịch compiler và được dùng để thêm các chú thích cho chương trình. Đây được gọi là phần comment của chương trình.\r\n\r\nDòng tiếp theo printf(...) là một hàm chức năng khác của ngôn ngữ C , in ra thông điệp \"Hello, World!\" hiển thị trên màn hình.\r\n\r\nDòng tiếp theo return 0; kết thúc hàm chính và trả về giá trị 0.\r\n\r\nBiên dịch & Thực thi Chương trình C\r\n1. Nếu bạn sử dụng Dev-C++, Microsoft Visual Studio, ... thì bạn mở ứng dụng, vào File, chọn New để tạo một source file mới. Sau đó sao chép code trên vào source file mới này. Với Dev-C++, bạn sử dụng Complile & Run để biên dịch và chạy chương trình. Với Microsoft Visual Studio, bạn thực hiện tương tự và sau đó sử dụng Build để biên dịch và thực thi.\r\n\r\n2. Nếu bạn dùng command prompt để biên dịch, bạn theo các bước sau:\r\n\r\nMở một trình editor và thêm dòng code ở trên.\r\n\r\nLưu tệp dưới dạng hello.c\r\n\r\nMở dòng nhắc lệnh và đi tới thư mục lưu trữ file.\r\n\r\nSoạn thảo gcc hello.c và nhấn Enter để biên dịch dòng code trên.\r\n\r\nNếu không có lỗi trên đoạn code bên trên, dòng nhắc lệnh sẽ đưa bạn đến dòng tiếp theo và tạo ra file a.out có thể thực thi.\r\n\r\nBây giờ, soạn thảo a.out để thực hiện chương trình này.\r\n\r\nBây giờ bạn sẽ thấy dòng chữ \"Hello, World\" được in trên màn hình.\r\n\r\n$ gcc hello.c\r\n$ ./a.out\r\nHello, World!\r\nBạn phải chắc chắn bộ biên dịch gcc được cài đặt trên máy tính của bạn và bạn đang chạy nó trong thư mục chứa file nguồn hello.c.', '2021-11-08 14:42:44', 0),
('public\\user\\admin\\source\\admin_post1.c', 5, 1, 1, 'Cài công cụ để lập trình C', 'Cài đặt IDE để biên dịch và thực thi C\r\nCó một số IDE có sẵn và miễn phí để biên dịch và thực thi các chương trình C. Bạn có thể chọn Dev-C++, Code:: Blocks, hoặc Turbo C. Tuy nhiên, lựa chọn phổ biến nhất và hay được sử dụng nhất là Dev-C++ và các chương trình C trong loạt bài này cũng được biên dịch và thực thi trong Dev-C++.\r\n\r\nBạn truy cập theo link sau để tải Dev-C++: Tải Dev-C++. Trên trang này cũng bao gồm cả Code:: Blocks. Sau khi bạn tải xong, để cài đặt IDE này, bạn chỉ cần vào Google và gõ \"cài đặt dev-c++\" là có rất nhiều video hướng dẫn chi tiết, cho nên mình không cần trình bày thêm nữa.\r\n\r\nSau khi đã cài đặt xong, để biên dịch và thực thi một chương trình C, bạn: (a) vào File -> New -> Project -> Console Application -> C project, sau đó nhập tên vào hoặc (b) File -> New -> Source File. Cuối cùng, sao chép và dán chương trình C vào file bạn vừa tạo. Để biên dịch và thực thi, chọn Execute -> Compile & Run.\r\n\r\nCài đặt để chạy trên Command Prompt\r\nNếu bạn muốn cài đặt để biên dịch và chạy trên Command Prompt, thì bạn nên đọc phần sau đây.\r\n\r\nNếu bạn đang muốn cài đặt chương trình C, bạn cần phải sử dụng 2 phần mềm trên máy tính của bạn: (a) Chương trình soạn văn bản - Text Editor và (b) Bộ biên dịch C.\r\n\r\nText Editor\r\nĐược sử dụng để soạn thảo các chương trình. Ví dụ về một vài trình editor như Window Notepad, Notepad ++, vim hay vi…\r\n\r\nTên và các phiên bản của các trình editor có thể thay đổi theo các hệ điều hành. Ví dụ, Notepad được sử dụng trên Windows, hoặc vim hay vi được sử dụng trên Linux hoặc UNIX.\r\n\r\nCác file bạn tạo trong trình editor được gọi là source file (file nguồn) và chứa các chương trình code. Các file trong chương trình C thường được đặt tên với phần mở rộng \".c\".\r\n\r\nTrước khi bắt đầu chương trình của bạn, hãy chắc chắn bạn có một trình editor trên máy tính và bạn có đủ kinh nghiệm để viết các chương trình máy tính, lưu trữ trong file và thực thi nó.\r\n\r\nBộ biên dịch C\r\nMã nguồn được viết trong file nguồn dưới dạng có thể đọc được. Nó sẽ được biên dịch thành mã máy, để cho CPU có thể thực hiện các chương trình này dựa trên các lệnh được viết.\r\n\r\nBộ biên dịch được sử dụng để biên dịch mã nguồn (source code) của bạn đến chương trình có thể thực thi. Tôi giả sử bạn có kiến thức cơ bản về một bộ biên dịch ngôn ngữ lập trình.\r\n\r\nBộ biên dịch thông dụng nhất là bộ biên dịch GNU C/C++, mặt khác bạn có thể có các bộ biên dịch khác như HP hoặc Solaris với Hệ điều hành tương ứng.\r\n\r\nDưới đây là phần hướng dẫn giúp bạn cách cài đặt bộ biên dich GNU C/C++ trên các hệ điều hành khác nhau. Tôi đang đề cập đến C/C++ bởi vì bộ biên dịch GNU gcc hoạt động cho cả ngôn ngữ C và C++.\r\n\r\nCài đặt trên môi trường UNIX/Linux\r\nNếu bạn đang sử dụng Linux hoặc UNIX, bạn có thể kiểm tra bộ GCC đã được cài đặt trên môi trường của bạn chưa bằng lệnh sau đây:\r\n\r\n$ gcc -v\r\nNếu bạn có bộ cài đặt GNU trên máy tính của bạn, sau đó nó sẽ phản hồi một thông báo sau:\r\n\r\nUsing built-in specs.\r\nTarget: i386-redhat-linux\r\nConfigured with: ../configure --prefix=/usr .......\r\nThread model: posix\r\ngcc version 4.1.2 20080704 (Red Hat 4.1.2-46)\r\nNếu bộ GCC chưa được cài đặt, bạn có thể cài đặt nó với hướng dẫn trên đường link dưới đây: http://gcc.gnu.org/install/\r\n\r\nBài hướng dẫn này được viết dựa trên Linux và tất cả các ví dụ dược biên dịch trên Cent OS của hệ thống Linux.\r\n\r\nCài đặt trên môi trường Mac OS\r\nNếu bạn sử dụng hệ điều hành Mac OS X, cách đơn giản nhất để có GCC là download môi trường phát triển Xcode, bạn có thể sử dụng bộ biên dịch GNU cho C/C++.\r\n\r\nXcode được sẵn dưới link sau: developer.apple.com/technologies/tools/.\r\n\r\nCài đặt trên Windows\r\nĐể cài đặt GCC trên Windows bạn cần phải cài đặt MinGW. Để cài đặt MinGW, bạn truy cập vào www.mingw.org, và theo hướng dẫn trên trang download này. Download phiên bản mới nhất cho chương trình MinGW, dưới tên MinGW-<version>.exe.\r\n\r\nKhi cài đặt MinWG, ít nhất bạn phải cài đặt gcc-core, gcc-g++, binutils và MinGW runtime, nhưng bạn có thể cài đặt nhiều hơn.\r\n\r\nThêm thư mục con bin trong nơi cài đặt MinGW vào biến môi trường PATH của bạn, bạn có thể sử dụng trực tiếp các công cụ dưới dạng command line một các dễ dàng.\r\n\r\nKhi quá trình cài đặt hoàn tất, bạn có thể chạy gcc, g++, ar, ranlib, dlltool và các công cụ GNU khác trên Windows command line.', '2021-11-07 14:42:44', 0),
(NULL, 6, 1, 1, 'Cấu trúc chương trình C', 'Trước khi chúng ta nghiên cứu về các khối tạo nên một chương trình C, đầu tiên bạn hãy xem một chương trình C mẫu.\r\n\r\nChương trình C: Hello World\r\nMột chương trình C bao gồm những phần sau đây:\r\n\r\nCác lệnh tiền xử lý\r\n\r\nCác hàm\r\n\r\nCác biến\r\n\r\nCác lệnh và biểu thức\r\n\r\nCác comment\r\n\r\nĐầu tiên hãy xem đoạn code đơn giản mà sẽ in ra màn hình hai từ \"Hello World\":\r\n\r\n#include <stdio.h>\r\n\r\nint main()\r\n{\r\n   /* Day la chuong trinh C dau tien */\r\n   printf(\"Hello, World! \\n\");\r\n   \r\n   return 0;\r\n}\r\nHãy xem các phần của chương trình bên trên:\r\n\r\nDòng đầu tiên của chương trình #include <stdio.h> là lệnh tiền xử lý, nhắc nhở bộ biên dịch C thêm tệp stdio.h trước khi biên dịch.\r\n\r\nDòng tiếp theo int main() là hàm main, nơi chương trình bắt đầu.\r\n\r\nDòng tiếp theo /*...*/ là dòng comment được bỏ qua bởi bộ biên dịch compiler và được dùng để thêm các chú thích cho chương trình. Đây được gọi là phần comment của chương trình.\r\n\r\nDòng tiếp theo printf(...) là một hàm chức năng khác của ngôn ngữ C , in ra thông điệp \"Hello, World!\" hiển thị trên màn hình.\r\n\r\nDòng tiếp theo return 0; kết thúc hàm chính và trả về giá trị 0.\r\n\r\nBiên dịch & Thực thi Chương trình C\r\n1. Nếu bạn sử dụng Dev-C++, Microsoft Visual Studio, ... thì bạn mở ứng dụng, vào File, chọn New để tạo một source file mới. Sau đó sao chép code trên vào source file mới này. Với Dev-C++, bạn sử dụng Complile & Run để biên dịch và chạy chương trình. Với Microsoft Visual Studio, bạn thực hiện tương tự và sau đó sử dụng Build để biên dịch và thực thi.\r\n\r\n2. Nếu bạn dùng command prompt để biên dịch, bạn theo các bước sau:\r\n\r\nMở một trình editor và thêm dòng code ở trên.\r\n\r\nLưu tệp dưới dạng hello.c\r\n\r\nMở dòng nhắc lệnh và đi tới thư mục lưu trữ file.\r\n\r\nSoạn thảo gcc hello.c và nhấn Enter để biên dịch dòng code trên.\r\n\r\nNếu không có lỗi trên đoạn code bên trên, dòng nhắc lệnh sẽ đưa bạn đến dòng tiếp theo và tạo ra file a.out có thể thực thi.\r\n\r\nBây giờ, soạn thảo a.out để thực hiện chương trình này.\r\n\r\nBây giờ bạn sẽ thấy dòng chữ \"Hello, World\" được in trên màn hình.\r\n\r\n$ gcc hello.c\r\n$ ./a.out\r\nHello, World!\r\nBạn phải chắc chắn bộ biên dịch gcc được cài đặt trên máy tính của bạn và bạn đang chạy nó trong thư mục chứa file nguồn hello.c.', '2021-11-08 14:42:44', 0),
('public\\user\\admin\\source\\admin_post1.c', 7, 1, 1, 'Cài công cụ để lập trình C', 'Cài đặt IDE để biên dịch và thực thi C\r\nCó một số IDE có sẵn và miễn phí để biên dịch và thực thi các chương trình C. Bạn có thể chọn Dev-C++, Code:: Blocks, hoặc Turbo C. Tuy nhiên, lựa chọn phổ biến nhất và hay được sử dụng nhất là Dev-C++ và các chương trình C trong loạt bài này cũng được biên dịch và thực thi trong Dev-C++.\r\n\r\nBạn truy cập theo link sau để tải Dev-C++: Tải Dev-C++. Trên trang này cũng bao gồm cả Code:: Blocks. Sau khi bạn tải xong, để cài đặt IDE này, bạn chỉ cần vào Google và gõ \"cài đặt dev-c++\" là có rất nhiều video hướng dẫn chi tiết, cho nên mình không cần trình bày thêm nữa.\r\n\r\nSau khi đã cài đặt xong, để biên dịch và thực thi một chương trình C, bạn: (a) vào File -> New -> Project -> Console Application -> C project, sau đó nhập tên vào hoặc (b) File -> New -> Source File. Cuối cùng, sao chép và dán chương trình C vào file bạn vừa tạo. Để biên dịch và thực thi, chọn Execute -> Compile & Run.\r\n\r\nCài đặt để chạy trên Command Prompt\r\nNếu bạn muốn cài đặt để biên dịch và chạy trên Command Prompt, thì bạn nên đọc phần sau đây.\r\n\r\nNếu bạn đang muốn cài đặt chương trình C, bạn cần phải sử dụng 2 phần mềm trên máy tính của bạn: (a) Chương trình soạn văn bản - Text Editor và (b) Bộ biên dịch C.\r\n\r\nText Editor\r\nĐược sử dụng để soạn thảo các chương trình. Ví dụ về một vài trình editor như Window Notepad, Notepad ++, vim hay vi…\r\n\r\nTên và các phiên bản của các trình editor có thể thay đổi theo các hệ điều hành. Ví dụ, Notepad được sử dụng trên Windows, hoặc vim hay vi được sử dụng trên Linux hoặc UNIX.\r\n\r\nCác file bạn tạo trong trình editor được gọi là source file (file nguồn) và chứa các chương trình code. Các file trong chương trình C thường được đặt tên với phần mở rộng \".c\".\r\n\r\nTrước khi bắt đầu chương trình của bạn, hãy chắc chắn bạn có một trình editor trên máy tính và bạn có đủ kinh nghiệm để viết các chương trình máy tính, lưu trữ trong file và thực thi nó.\r\n\r\nBộ biên dịch C\r\nMã nguồn được viết trong file nguồn dưới dạng có thể đọc được. Nó sẽ được biên dịch thành mã máy, để cho CPU có thể thực hiện các chương trình này dựa trên các lệnh được viết.\r\n\r\nBộ biên dịch được sử dụng để biên dịch mã nguồn (source code) của bạn đến chương trình có thể thực thi. Tôi giả sử bạn có kiến thức cơ bản về một bộ biên dịch ngôn ngữ lập trình.\r\n\r\nBộ biên dịch thông dụng nhất là bộ biên dịch GNU C/C++, mặt khác bạn có thể có các bộ biên dịch khác như HP hoặc Solaris với Hệ điều hành tương ứng.\r\n\r\nDưới đây là phần hướng dẫn giúp bạn cách cài đặt bộ biên dich GNU C/C++ trên các hệ điều hành khác nhau. Tôi đang đề cập đến C/C++ bởi vì bộ biên dịch GNU gcc hoạt động cho cả ngôn ngữ C và C++.\r\n\r\nCài đặt trên môi trường UNIX/Linux\r\nNếu bạn đang sử dụng Linux hoặc UNIX, bạn có thể kiểm tra bộ GCC đã được cài đặt trên môi trường của bạn chưa bằng lệnh sau đây:\r\n\r\n$ gcc -v\r\nNếu bạn có bộ cài đặt GNU trên máy tính của bạn, sau đó nó sẽ phản hồi một thông báo sau:\r\n\r\nUsing built-in specs.\r\nTarget: i386-redhat-linux\r\nConfigured with: ../configure --prefix=/usr .......\r\nThread model: posix\r\ngcc version 4.1.2 20080704 (Red Hat 4.1.2-46)\r\nNếu bộ GCC chưa được cài đặt, bạn có thể cài đặt nó với hướng dẫn trên đường link dưới đây: http://gcc.gnu.org/install/\r\n\r\nBài hướng dẫn này được viết dựa trên Linux và tất cả các ví dụ dược biên dịch trên Cent OS của hệ thống Linux.\r\n\r\nCài đặt trên môi trường Mac OS\r\nNếu bạn sử dụng hệ điều hành Mac OS X, cách đơn giản nhất để có GCC là download môi trường phát triển Xcode, bạn có thể sử dụng bộ biên dịch GNU cho C/C++.\r\n\r\nXcode được sẵn dưới link sau: developer.apple.com/technologies/tools/.\r\n\r\nCài đặt trên Windows\r\nĐể cài đặt GCC trên Windows bạn cần phải cài đặt MinGW. Để cài đặt MinGW, bạn truy cập vào www.mingw.org, và theo hướng dẫn trên trang download này. Download phiên bản mới nhất cho chương trình MinGW, dưới tên MinGW-<version>.exe.\r\n\r\nKhi cài đặt MinWG, ít nhất bạn phải cài đặt gcc-core, gcc-g++, binutils và MinGW runtime, nhưng bạn có thể cài đặt nhiều hơn.\r\n\r\nThêm thư mục con bin trong nơi cài đặt MinGW vào biến môi trường PATH của bạn, bạn có thể sử dụng trực tiếp các công cụ dưới dạng command line một các dễ dàng.\r\n\r\nKhi quá trình cài đặt hoàn tất, bạn có thể chạy gcc, g++, ar, ranlib, dlltool và các công cụ GNU khác trên Windows command line.', '2021-11-07 14:42:44', 0),
(NULL, 8, 1, 1, 'Cấu trúc chương trình C', 'Trước khi chúng ta nghiên cứu về các khối tạo nên một chương trình C, đầu tiên bạn hãy xem một chương trình C mẫu.\r\n\r\nChương trình C: Hello World\r\nMột chương trình C bao gồm những phần sau đây:\r\n\r\nCác lệnh tiền xử lý\r\n\r\nCác hàm\r\n\r\nCác biến\r\n\r\nCác lệnh và biểu thức\r\n\r\nCác comment\r\n\r\nĐầu tiên hãy xem đoạn code đơn giản mà sẽ in ra màn hình hai từ \"Hello World\":\r\n\r\n#include <stdio.h>\r\n\r\nint main()\r\n{\r\n   /* Day la chuong trinh C dau tien */\r\n   printf(\"Hello, World! \\n\");\r\n   \r\n   return 0;\r\n}\r\nHãy xem các phần của chương trình bên trên:\r\n\r\nDòng đầu tiên của chương trình #include <stdio.h> là lệnh tiền xử lý, nhắc nhở bộ biên dịch C thêm tệp stdio.h trước khi biên dịch.\r\n\r\nDòng tiếp theo int main() là hàm main, nơi chương trình bắt đầu.\r\n\r\nDòng tiếp theo /*...*/ là dòng comment được bỏ qua bởi bộ biên dịch compiler và được dùng để thêm các chú thích cho chương trình. Đây được gọi là phần comment của chương trình.\r\n\r\nDòng tiếp theo printf(...) là một hàm chức năng khác của ngôn ngữ C , in ra thông điệp \"Hello, World!\" hiển thị trên màn hình.\r\n\r\nDòng tiếp theo return 0; kết thúc hàm chính và trả về giá trị 0.\r\n\r\nBiên dịch & Thực thi Chương trình C\r\n1. Nếu bạn sử dụng Dev-C++, Microsoft Visual Studio, ... thì bạn mở ứng dụng, vào File, chọn New để tạo một source file mới. Sau đó sao chép code trên vào source file mới này. Với Dev-C++, bạn sử dụng Complile & Run để biên dịch và chạy chương trình. Với Microsoft Visual Studio, bạn thực hiện tương tự và sau đó sử dụng Build để biên dịch và thực thi.\r\n\r\n2. Nếu bạn dùng command prompt để biên dịch, bạn theo các bước sau:\r\n\r\nMở một trình editor và thêm dòng code ở trên.\r\n\r\nLưu tệp dưới dạng hello.c\r\n\r\nMở dòng nhắc lệnh và đi tới thư mục lưu trữ file.\r\n\r\nSoạn thảo gcc hello.c và nhấn Enter để biên dịch dòng code trên.\r\n\r\nNếu không có lỗi trên đoạn code bên trên, dòng nhắc lệnh sẽ đưa bạn đến dòng tiếp theo và tạo ra file a.out có thể thực thi.\r\n\r\nBây giờ, soạn thảo a.out để thực hiện chương trình này.\r\n\r\nBây giờ bạn sẽ thấy dòng chữ \"Hello, World\" được in trên màn hình.\r\n\r\n$ gcc hello.c\r\n$ ./a.out\r\nHello, World!\r\nBạn phải chắc chắn bộ biên dịch gcc được cài đặt trên máy tính của bạn và bạn đang chạy nó trong thư mục chứa file nguồn hello.c.', '2021-11-08 14:42:44', 2),
('public\\user\\admin\\source\\admin_post1.c', 9, 1, 1, 'Cài công cụ để lập trình C', 'Cài đặt IDE để biên dịch và thực thi C\r\nCó một số IDE có sẵn và miễn phí để biên dịch và thực thi các chương trình C. Bạn có thể chọn Dev-C++, Code:: Blocks, hoặc Turbo C. Tuy nhiên, lựa chọn phổ biến nhất và hay được sử dụng nhất là Dev-C++ và các chương trình C trong loạt bài này cũng được biên dịch và thực thi trong Dev-C++.\r\n\r\nBạn truy cập theo link sau để tải Dev-C++: Tải Dev-C++. Trên trang này cũng bao gồm cả Code:: Blocks. Sau khi bạn tải xong, để cài đặt IDE này, bạn chỉ cần vào Google và gõ \"cài đặt dev-c++\" là có rất nhiều video hướng dẫn chi tiết, cho nên mình không cần trình bày thêm nữa.\r\n\r\nSau khi đã cài đặt xong, để biên dịch và thực thi một chương trình C, bạn: (a) vào File -> New -> Project -> Console Application -> C project, sau đó nhập tên vào hoặc (b) File -> New -> Source File. Cuối cùng, sao chép và dán chương trình C vào file bạn vừa tạo. Để biên dịch và thực thi, chọn Execute -> Compile & Run.\r\n\r\nCài đặt để chạy trên Command Prompt\r\nNếu bạn muốn cài đặt để biên dịch và chạy trên Command Prompt, thì bạn nên đọc phần sau đây.\r\n\r\nNếu bạn đang muốn cài đặt chương trình C, bạn cần phải sử dụng 2 phần mềm trên máy tính của bạn: (a) Chương trình soạn văn bản - Text Editor và (b) Bộ biên dịch C.\r\n\r\nText Editor\r\nĐược sử dụng để soạn thảo các chương trình. Ví dụ về một vài trình editor như Window Notepad, Notepad ++, vim hay vi…\r\n\r\nTên và các phiên bản của các trình editor có thể thay đổi theo các hệ điều hành. Ví dụ, Notepad được sử dụng trên Windows, hoặc vim hay vi được sử dụng trên Linux hoặc UNIX.\r\n\r\nCác file bạn tạo trong trình editor được gọi là source file (file nguồn) và chứa các chương trình code. Các file trong chương trình C thường được đặt tên với phần mở rộng \".c\".\r\n\r\nTrước khi bắt đầu chương trình của bạn, hãy chắc chắn bạn có một trình editor trên máy tính và bạn có đủ kinh nghiệm để viết các chương trình máy tính, lưu trữ trong file và thực thi nó.\r\n\r\nBộ biên dịch C\r\nMã nguồn được viết trong file nguồn dưới dạng có thể đọc được. Nó sẽ được biên dịch thành mã máy, để cho CPU có thể thực hiện các chương trình này dựa trên các lệnh được viết.\r\n\r\nBộ biên dịch được sử dụng để biên dịch mã nguồn (source code) của bạn đến chương trình có thể thực thi. Tôi giả sử bạn có kiến thức cơ bản về một bộ biên dịch ngôn ngữ lập trình.\r\n\r\nBộ biên dịch thông dụng nhất là bộ biên dịch GNU C/C++, mặt khác bạn có thể có các bộ biên dịch khác như HP hoặc Solaris với Hệ điều hành tương ứng.\r\n\r\nDưới đây là phần hướng dẫn giúp bạn cách cài đặt bộ biên dich GNU C/C++ trên các hệ điều hành khác nhau. Tôi đang đề cập đến C/C++ bởi vì bộ biên dịch GNU gcc hoạt động cho cả ngôn ngữ C và C++.\r\n\r\nCài đặt trên môi trường UNIX/Linux\r\nNếu bạn đang sử dụng Linux hoặc UNIX, bạn có thể kiểm tra bộ GCC đã được cài đặt trên môi trường của bạn chưa bằng lệnh sau đây:\r\n\r\n$ gcc -v\r\nNếu bạn có bộ cài đặt GNU trên máy tính của bạn, sau đó nó sẽ phản hồi một thông báo sau:\r\n\r\nUsing built-in specs.\r\nTarget: i386-redhat-linux\r\nConfigured with: ../configure --prefix=/usr .......\r\nThread model: posix\r\ngcc version 4.1.2 20080704 (Red Hat 4.1.2-46)\r\nNếu bộ GCC chưa được cài đặt, bạn có thể cài đặt nó với hướng dẫn trên đường link dưới đây: http://gcc.gnu.org/install/\r\n\r\nBài hướng dẫn này được viết dựa trên Linux và tất cả các ví dụ dược biên dịch trên Cent OS của hệ thống Linux.\r\n\r\nCài đặt trên môi trường Mac OS\r\nNếu bạn sử dụng hệ điều hành Mac OS X, cách đơn giản nhất để có GCC là download môi trường phát triển Xcode, bạn có thể sử dụng bộ biên dịch GNU cho C/C++.\r\n\r\nXcode được sẵn dưới link sau: developer.apple.com/technologies/tools/.\r\n\r\nCài đặt trên Windows\r\nĐể cài đặt GCC trên Windows bạn cần phải cài đặt MinGW. Để cài đặt MinGW, bạn truy cập vào www.mingw.org, và theo hướng dẫn trên trang download này. Download phiên bản mới nhất cho chương trình MinGW, dưới tên MinGW-<version>.exe.\r\n\r\nKhi cài đặt MinWG, ít nhất bạn phải cài đặt gcc-core, gcc-g++, binutils và MinGW runtime, nhưng bạn có thể cài đặt nhiều hơn.\r\n\r\nThêm thư mục con bin trong nơi cài đặt MinGW vào biến môi trường PATH của bạn, bạn có thể sử dụng trực tiếp các công cụ dưới dạng command line một các dễ dàng.\r\n\r\nKhi quá trình cài đặt hoàn tất, bạn có thể chạy gcc, g++, ar, ranlib, dlltool và các công cụ GNU khác trên Windows command line.', '2021-11-07 14:42:44', 0),
(NULL, 10, 1, 1, 'Cấu trúc chương trình C', 'Trước khi chúng ta nghiên cứu về các khối tạo nên một chương trình C, đầu tiên bạn hãy xem một chương trình C mẫu.\r\n\r\nChương trình C: Hello World\r\nMột chương trình C bao gồm những phần sau đây:\r\n\r\nCác lệnh tiền xử lý\r\n\r\nCác hàm\r\n\r\nCác biến\r\n\r\nCác lệnh và biểu thức\r\n\r\nCác comment\r\n\r\nĐầu tiên hãy xem đoạn code đơn giản mà sẽ in ra màn hình hai từ \"Hello World\":\r\n\r\n#include <stdio.h>\r\n\r\nint main()\r\n{\r\n   /* Day la chuong trinh C dau tien */\r\n   printf(\"Hello, World! \\n\");\r\n   \r\n   return 0;\r\n}\r\nHãy xem các phần của chương trình bên trên:\r\n\r\nDòng đầu tiên của chương trình #include <stdio.h> là lệnh tiền xử lý, nhắc nhở bộ biên dịch C thêm tệp stdio.h trước khi biên dịch.\r\n\r\nDòng tiếp theo int main() là hàm main, nơi chương trình bắt đầu.\r\n\r\nDòng tiếp theo /*...*/ là dòng comment được bỏ qua bởi bộ biên dịch compiler và được dùng để thêm các chú thích cho chương trình. Đây được gọi là phần comment của chương trình.\r\n\r\nDòng tiếp theo printf(...) là một hàm chức năng khác của ngôn ngữ C , in ra thông điệp \"Hello, World!\" hiển thị trên màn hình.\r\n\r\nDòng tiếp theo return 0; kết thúc hàm chính và trả về giá trị 0.\r\n\r\nBiên dịch & Thực thi Chương trình C\r\n1. Nếu bạn sử dụng Dev-C++, Microsoft Visual Studio, ... thì bạn mở ứng dụng, vào File, chọn New để tạo một source file mới. Sau đó sao chép code trên vào source file mới này. Với Dev-C++, bạn sử dụng Complile & Run để biên dịch và chạy chương trình. Với Microsoft Visual Studio, bạn thực hiện tương tự và sau đó sử dụng Build để biên dịch và thực thi.\r\n\r\n2. Nếu bạn dùng command prompt để biên dịch, bạn theo các bước sau:\r\n\r\nMở một trình editor và thêm dòng code ở trên.\r\n\r\nLưu tệp dưới dạng hello.c\r\n\r\nMở dòng nhắc lệnh và đi tới thư mục lưu trữ file.\r\n\r\nSoạn thảo gcc hello.c và nhấn Enter để biên dịch dòng code trên.\r\n\r\nNếu không có lỗi trên đoạn code bên trên, dòng nhắc lệnh sẽ đưa bạn đến dòng tiếp theo và tạo ra file a.out có thể thực thi.\r\n\r\nBây giờ, soạn thảo a.out để thực hiện chương trình này.\r\n\r\nBây giờ bạn sẽ thấy dòng chữ \"Hello, World\" được in trên màn hình.\r\n\r\n$ gcc hello.c\r\n$ ./a.out\r\nHello, World!\r\nBạn phải chắc chắn bộ biên dịch gcc được cài đặt trên máy tính của bạn và bạn đang chạy nó trong thư mục chứa file nguồn hello.c.', '2021-11-08 14:42:44', 0),
('public\\user\\admin\\source\\admin_post1.c', 11, 1, 1, 'Cài công cụ để lập trình C', 'Cài đặt IDE để biên dịch và thực thi C\r\nCó một số IDE có sẵn và miễn phí để biên dịch và thực thi các chương trình C. Bạn có thể chọn Dev-C++, Code:: Blocks, hoặc Turbo C. Tuy nhiên, lựa chọn phổ biến nhất và hay được sử dụng nhất là Dev-C++ và các chương trình C trong loạt bài này cũng được biên dịch và thực thi trong Dev-C++.\r\n\r\nBạn truy cập theo link sau để tải Dev-C++: Tải Dev-C++. Trên trang này cũng bao gồm cả Code:: Blocks. Sau khi bạn tải xong, để cài đặt IDE này, bạn chỉ cần vào Google và gõ \"cài đặt dev-c++\" là có rất nhiều video hướng dẫn chi tiết, cho nên mình không cần trình bày thêm nữa.\r\n\r\nSau khi đã cài đặt xong, để biên dịch và thực thi một chương trình C, bạn: (a) vào File -> New -> Project -> Console Application -> C project, sau đó nhập tên vào hoặc (b) File -> New -> Source File. Cuối cùng, sao chép và dán chương trình C vào file bạn vừa tạo. Để biên dịch và thực thi, chọn Execute -> Compile & Run.\r\n\r\nCài đặt để chạy trên Command Prompt\r\nNếu bạn muốn cài đặt để biên dịch và chạy trên Command Prompt, thì bạn nên đọc phần sau đây.\r\n\r\nNếu bạn đang muốn cài đặt chương trình C, bạn cần phải sử dụng 2 phần mềm trên máy tính của bạn: (a) Chương trình soạn văn bản - Text Editor và (b) Bộ biên dịch C.\r\n\r\nText Editor\r\nĐược sử dụng để soạn thảo các chương trình. Ví dụ về một vài trình editor như Window Notepad, Notepad ++, vim hay vi…\r\n\r\nTên và các phiên bản của các trình editor có thể thay đổi theo các hệ điều hành. Ví dụ, Notepad được sử dụng trên Windows, hoặc vim hay vi được sử dụng trên Linux hoặc UNIX.\r\n\r\nCác file bạn tạo trong trình editor được gọi là source file (file nguồn) và chứa các chương trình code. Các file trong chương trình C thường được đặt tên với phần mở rộng \".c\".\r\n\r\nTrước khi bắt đầu chương trình của bạn, hãy chắc chắn bạn có một trình editor trên máy tính và bạn có đủ kinh nghiệm để viết các chương trình máy tính, lưu trữ trong file và thực thi nó.\r\n\r\nBộ biên dịch C\r\nMã nguồn được viết trong file nguồn dưới dạng có thể đọc được. Nó sẽ được biên dịch thành mã máy, để cho CPU có thể thực hiện các chương trình này dựa trên các lệnh được viết.\r\n\r\nBộ biên dịch được sử dụng để biên dịch mã nguồn (source code) của bạn đến chương trình có thể thực thi. Tôi giả sử bạn có kiến thức cơ bản về một bộ biên dịch ngôn ngữ lập trình.\r\n\r\nBộ biên dịch thông dụng nhất là bộ biên dịch GNU C/C++, mặt khác bạn có thể có các bộ biên dịch khác như HP hoặc Solaris với Hệ điều hành tương ứng.\r\n\r\nDưới đây là phần hướng dẫn giúp bạn cách cài đặt bộ biên dich GNU C/C++ trên các hệ điều hành khác nhau. Tôi đang đề cập đến C/C++ bởi vì bộ biên dịch GNU gcc hoạt động cho cả ngôn ngữ C và C++.\r\n\r\nCài đặt trên môi trường UNIX/Linux\r\nNếu bạn đang sử dụng Linux hoặc UNIX, bạn có thể kiểm tra bộ GCC đã được cài đặt trên môi trường của bạn chưa bằng lệnh sau đây:\r\n\r\n$ gcc -v\r\nNếu bạn có bộ cài đặt GNU trên máy tính của bạn, sau đó nó sẽ phản hồi một thông báo sau:\r\n\r\nUsing built-in specs.\r\nTarget: i386-redhat-linux\r\nConfigured with: ../configure --prefix=/usr .......\r\nThread model: posix\r\ngcc version 4.1.2 20080704 (Red Hat 4.1.2-46)\r\nNếu bộ GCC chưa được cài đặt, bạn có thể cài đặt nó với hướng dẫn trên đường link dưới đây: http://gcc.gnu.org/install/\r\n\r\nBài hướng dẫn này được viết dựa trên Linux và tất cả các ví dụ dược biên dịch trên Cent OS của hệ thống Linux.\r\n\r\nCài đặt trên môi trường Mac OS\r\nNếu bạn sử dụng hệ điều hành Mac OS X, cách đơn giản nhất để có GCC là download môi trường phát triển Xcode, bạn có thể sử dụng bộ biên dịch GNU cho C/C++.\r\n\r\nXcode được sẵn dưới link sau: developer.apple.com/technologies/tools/.\r\n\r\nCài đặt trên Windows\r\nĐể cài đặt GCC trên Windows bạn cần phải cài đặt MinGW. Để cài đặt MinGW, bạn truy cập vào www.mingw.org, và theo hướng dẫn trên trang download này. Download phiên bản mới nhất cho chương trình MinGW, dưới tên MinGW-<version>.exe.\r\n\r\nKhi cài đặt MinWG, ít nhất bạn phải cài đặt gcc-core, gcc-g++, binutils và MinGW runtime, nhưng bạn có thể cài đặt nhiều hơn.\r\n\r\nThêm thư mục con bin trong nơi cài đặt MinGW vào biến môi trường PATH của bạn, bạn có thể sử dụng trực tiếp các công cụ dưới dạng command line một các dễ dàng.\r\n\r\nKhi quá trình cài đặt hoàn tất, bạn có thể chạy gcc, g++, ar, ranlib, dlltool và các công cụ GNU khác trên Windows command line.', '2021-11-07 14:42:44', 0),
(NULL, 12, 1, 1, 'Cấu trúc chương trình C', 'Trước khi chúng ta nghiên cứu về các khối tạo nên một chương trình C, đầu tiên bạn hãy xem một chương trình C mẫu.\r\n\r\nChương trình C: Hello World\r\nMột chương trình C bao gồm những phần sau đây:\r\n\r\nCác lệnh tiền xử lý\r\n\r\nCác hàm\r\n\r\nCác biến\r\n\r\nCác lệnh và biểu thức\r\n\r\nCác comment\r\n\r\nĐầu tiên hãy xem đoạn code đơn giản mà sẽ in ra màn hình hai từ \"Hello World\":\r\n\r\n#include <stdio.h>\r\n\r\nint main()\r\n{\r\n   /* Day la chuong trinh C dau tien */\r\n   printf(\"Hello, World! \\n\");\r\n   \r\n   return 0;\r\n}\r\nHãy xem các phần của chương trình bên trên:\r\n\r\nDòng đầu tiên của chương trình #include <stdio.h> là lệnh tiền xử lý, nhắc nhở bộ biên dịch C thêm tệp stdio.h trước khi biên dịch.\r\n\r\nDòng tiếp theo int main() là hàm main, nơi chương trình bắt đầu.\r\n\r\nDòng tiếp theo /*...*/ là dòng comment được bỏ qua bởi bộ biên dịch compiler và được dùng để thêm các chú thích cho chương trình. Đây được gọi là phần comment của chương trình.\r\n\r\nDòng tiếp theo printf(...) là một hàm chức năng khác của ngôn ngữ C , in ra thông điệp \"Hello, World!\" hiển thị trên màn hình.\r\n\r\nDòng tiếp theo return 0; kết thúc hàm chính và trả về giá trị 0.\r\n\r\nBiên dịch & Thực thi Chương trình C\r\n1. Nếu bạn sử dụng Dev-C++, Microsoft Visual Studio, ... thì bạn mở ứng dụng, vào File, chọn New để tạo một source file mới. Sau đó sao chép code trên vào source file mới này. Với Dev-C++, bạn sử dụng Complile & Run để biên dịch và chạy chương trình. Với Microsoft Visual Studio, bạn thực hiện tương tự và sau đó sử dụng Build để biên dịch và thực thi.\r\n\r\n2. Nếu bạn dùng command prompt để biên dịch, bạn theo các bước sau:\r\n\r\nMở một trình editor và thêm dòng code ở trên.\r\n\r\nLưu tệp dưới dạng hello.c\r\n\r\nMở dòng nhắc lệnh và đi tới thư mục lưu trữ file.\r\n\r\nSoạn thảo gcc hello.c và nhấn Enter để biên dịch dòng code trên.\r\n\r\nNếu không có lỗi trên đoạn code bên trên, dòng nhắc lệnh sẽ đưa bạn đến dòng tiếp theo và tạo ra file a.out có thể thực thi.\r\n\r\nBây giờ, soạn thảo a.out để thực hiện chương trình này.\r\n\r\nBây giờ bạn sẽ thấy dòng chữ \"Hello, World\" được in trên màn hình.\r\n\r\n$ gcc hello.c\r\n$ ./a.out\r\nHello, World!\r\nBạn phải chắc chắn bộ biên dịch gcc được cài đặt trên máy tính của bạn và bạn đang chạy nó trong thư mục chứa file nguồn hello.c.', '2021-11-08 14:42:44', 0),
('public\\user\\admin\\source\\admin_post1.c', 13, 1, 1, 'Cài công cụ để lập trình C', 'Cài đặt IDE để biên dịch và thực thi C\r\nCó một số IDE có sẵn và miễn phí để biên dịch và thực thi các chương trình C. Bạn có thể chọn Dev-C++, Code:: Blocks, hoặc Turbo C. Tuy nhiên, lựa chọn phổ biến nhất và hay được sử dụng nhất là Dev-C++ và các chương trình C trong loạt bài này cũng được biên dịch và thực thi trong Dev-C++.\r\n\r\nBạn truy cập theo link sau để tải Dev-C++: Tải Dev-C++. Trên trang này cũng bao gồm cả Code:: Blocks. Sau khi bạn tải xong, để cài đặt IDE này, bạn chỉ cần vào Google và gõ \"cài đặt dev-c++\" là có rất nhiều video hướng dẫn chi tiết, cho nên mình không cần trình bày thêm nữa.\r\n\r\nSau khi đã cài đặt xong, để biên dịch và thực thi một chương trình C, bạn: (a) vào File -> New -> Project -> Console Application -> C project, sau đó nhập tên vào hoặc (b) File -> New -> Source File. Cuối cùng, sao chép và dán chương trình C vào file bạn vừa tạo. Để biên dịch và thực thi, chọn Execute -> Compile & Run.\r\n\r\nCài đặt để chạy trên Command Prompt\r\nNếu bạn muốn cài đặt để biên dịch và chạy trên Command Prompt, thì bạn nên đọc phần sau đây.\r\n\r\nNếu bạn đang muốn cài đặt chương trình C, bạn cần phải sử dụng 2 phần mềm trên máy tính của bạn: (a) Chương trình soạn văn bản - Text Editor và (b) Bộ biên dịch C.\r\n\r\nText Editor\r\nĐược sử dụng để soạn thảo các chương trình. Ví dụ về một vài trình editor như Window Notepad, Notepad ++, vim hay vi…\r\n\r\nTên và các phiên bản của các trình editor có thể thay đổi theo các hệ điều hành. Ví dụ, Notepad được sử dụng trên Windows, hoặc vim hay vi được sử dụng trên Linux hoặc UNIX.\r\n\r\nCác file bạn tạo trong trình editor được gọi là source file (file nguồn) và chứa các chương trình code. Các file trong chương trình C thường được đặt tên với phần mở rộng \".c\".\r\n\r\nTrước khi bắt đầu chương trình của bạn, hãy chắc chắn bạn có một trình editor trên máy tính và bạn có đủ kinh nghiệm để viết các chương trình máy tính, lưu trữ trong file và thực thi nó.\r\n\r\nBộ biên dịch C\r\nMã nguồn được viết trong file nguồn dưới dạng có thể đọc được. Nó sẽ được biên dịch thành mã máy, để cho CPU có thể thực hiện các chương trình này dựa trên các lệnh được viết.\r\n\r\nBộ biên dịch được sử dụng để biên dịch mã nguồn (source code) của bạn đến chương trình có thể thực thi. Tôi giả sử bạn có kiến thức cơ bản về một bộ biên dịch ngôn ngữ lập trình.\r\n\r\nBộ biên dịch thông dụng nhất là bộ biên dịch GNU C/C++, mặt khác bạn có thể có các bộ biên dịch khác như HP hoặc Solaris với Hệ điều hành tương ứng.\r\n\r\nDưới đây là phần hướng dẫn giúp bạn cách cài đặt bộ biên dich GNU C/C++ trên các hệ điều hành khác nhau. Tôi đang đề cập đến C/C++ bởi vì bộ biên dịch GNU gcc hoạt động cho cả ngôn ngữ C và C++.\r\n\r\nCài đặt trên môi trường UNIX/Linux\r\nNếu bạn đang sử dụng Linux hoặc UNIX, bạn có thể kiểm tra bộ GCC đã được cài đặt trên môi trường của bạn chưa bằng lệnh sau đây:\r\n\r\n$ gcc -v\r\nNếu bạn có bộ cài đặt GNU trên máy tính của bạn, sau đó nó sẽ phản hồi một thông báo sau:\r\n\r\nUsing built-in specs.\r\nTarget: i386-redhat-linux\r\nConfigured with: ../configure --prefix=/usr .......\r\nThread model: posix\r\ngcc version 4.1.2 20080704 (Red Hat 4.1.2-46)\r\nNếu bộ GCC chưa được cài đặt, bạn có thể cài đặt nó với hướng dẫn trên đường link dưới đây: http://gcc.gnu.org/install/\r\n\r\nBài hướng dẫn này được viết dựa trên Linux và tất cả các ví dụ dược biên dịch trên Cent OS của hệ thống Linux.\r\n\r\nCài đặt trên môi trường Mac OS\r\nNếu bạn sử dụng hệ điều hành Mac OS X, cách đơn giản nhất để có GCC là download môi trường phát triển Xcode, bạn có thể sử dụng bộ biên dịch GNU cho C/C++.\r\n\r\nXcode được sẵn dưới link sau: developer.apple.com/technologies/tools/.\r\n\r\nCài đặt trên Windows\r\nĐể cài đặt GCC trên Windows bạn cần phải cài đặt MinGW. Để cài đặt MinGW, bạn truy cập vào www.mingw.org, và theo hướng dẫn trên trang download này. Download phiên bản mới nhất cho chương trình MinGW, dưới tên MinGW-<version>.exe.\r\n\r\nKhi cài đặt MinWG, ít nhất bạn phải cài đặt gcc-core, gcc-g++, binutils và MinGW runtime, nhưng bạn có thể cài đặt nhiều hơn.\r\n\r\nThêm thư mục con bin trong nơi cài đặt MinGW vào biến môi trường PATH của bạn, bạn có thể sử dụng trực tiếp các công cụ dưới dạng command line một các dễ dàng.\r\n\r\nKhi quá trình cài đặt hoàn tất, bạn có thể chạy gcc, g++, ar, ranlib, dlltool và các công cụ GNU khác trên Windows command line.', '2021-11-07 14:42:44', 0),
(NULL, 14, 1, 1, 'Cấu trúc chương trình C', 'Trước khi chúng ta nghiên cứu về các khối tạo nên một chương trình C, đầu tiên bạn hãy xem một chương trình C mẫu.\r\n\r\nChương trình C: Hello World\r\nMột chương trình C bao gồm những phần sau đây:\r\n\r\nCác lệnh tiền xử lý\r\n\r\nCác hàm\r\n\r\nCác biến\r\n\r\nCác lệnh và biểu thức\r\n\r\nCác comment\r\n\r\nĐầu tiên hãy xem đoạn code đơn giản mà sẽ in ra màn hình hai từ \"Hello World\":\r\n\r\n#include <stdio.h>\r\n\r\nint main()\r\n{\r\n   /* Day la chuong trinh C dau tien */\r\n   printf(\"Hello, World! \\n\");\r\n   \r\n   return 0;\r\n}\r\nHãy xem các phần của chương trình bên trên:\r\n\r\nDòng đầu tiên của chương trình #include <stdio.h> là lệnh tiền xử lý, nhắc nhở bộ biên dịch C thêm tệp stdio.h trước khi biên dịch.\r\n\r\nDòng tiếp theo int main() là hàm main, nơi chương trình bắt đầu.\r\n\r\nDòng tiếp theo /*...*/ là dòng comment được bỏ qua bởi bộ biên dịch compiler và được dùng để thêm các chú thích cho chương trình. Đây được gọi là phần comment của chương trình.\r\n\r\nDòng tiếp theo printf(...) là một hàm chức năng khác của ngôn ngữ C , in ra thông điệp \"Hello, World!\" hiển thị trên màn hình.\r\n\r\nDòng tiếp theo return 0; kết thúc hàm chính và trả về giá trị 0.\r\n\r\nBiên dịch & Thực thi Chương trình C\r\n1. Nếu bạn sử dụng Dev-C++, Microsoft Visual Studio, ... thì bạn mở ứng dụng, vào File, chọn New để tạo một source file mới. Sau đó sao chép code trên vào source file mới này. Với Dev-C++, bạn sử dụng Complile & Run để biên dịch và chạy chương trình. Với Microsoft Visual Studio, bạn thực hiện tương tự và sau đó sử dụng Build để biên dịch và thực thi.\r\n\r\n2. Nếu bạn dùng command prompt để biên dịch, bạn theo các bước sau:\r\n\r\nMở một trình editor và thêm dòng code ở trên.\r\n\r\nLưu tệp dưới dạng hello.c\r\n\r\nMở dòng nhắc lệnh và đi tới thư mục lưu trữ file.\r\n\r\nSoạn thảo gcc hello.c và nhấn Enter để biên dịch dòng code trên.\r\n\r\nNếu không có lỗi trên đoạn code bên trên, dòng nhắc lệnh sẽ đưa bạn đến dòng tiếp theo và tạo ra file a.out có thể thực thi.\r\n\r\nBây giờ, soạn thảo a.out để thực hiện chương trình này.\r\n\r\nBây giờ bạn sẽ thấy dòng chữ \"Hello, World\" được in trên màn hình.\r\n\r\n$ gcc hello.c\r\n$ ./a.out\r\nHello, World!\r\nBạn phải chắc chắn bộ biên dịch gcc được cài đặt trên máy tính của bạn và bạn đang chạy nó trong thư mục chứa file nguồn hello.c.', '2021-11-08 14:42:44', 0);
INSERT INTO `post` (`source_code`, `id_post`, `id_topic`, `id_user`, `post_title`, `post_content`, `post_date_created`, `post_views`) VALUES
('public\\user\\admin\\source\\admin_post1.c', 15, 1, 1, 'Cài công cụ để lập trình C', 'Cài đặt IDE để biên dịch và thực thi C\r\nCó một số IDE có sẵn và miễn phí để biên dịch và thực thi các chương trình C. Bạn có thể chọn Dev-C++, Code:: Blocks, hoặc Turbo C. Tuy nhiên, lựa chọn phổ biến nhất và hay được sử dụng nhất là Dev-C++ và các chương trình C trong loạt bài này cũng được biên dịch và thực thi trong Dev-C++.\r\n\r\nBạn truy cập theo link sau để tải Dev-C++: Tải Dev-C++. Trên trang này cũng bao gồm cả Code:: Blocks. Sau khi bạn tải xong, để cài đặt IDE này, bạn chỉ cần vào Google và gõ \"cài đặt dev-c++\" là có rất nhiều video hướng dẫn chi tiết, cho nên mình không cần trình bày thêm nữa.\r\n\r\nSau khi đã cài đặt xong, để biên dịch và thực thi một chương trình C, bạn: (a) vào File -> New -> Project -> Console Application -> C project, sau đó nhập tên vào hoặc (b) File -> New -> Source File. Cuối cùng, sao chép và dán chương trình C vào file bạn vừa tạo. Để biên dịch và thực thi, chọn Execute -> Compile & Run.\r\n\r\nCài đặt để chạy trên Command Prompt\r\nNếu bạn muốn cài đặt để biên dịch và chạy trên Command Prompt, thì bạn nên đọc phần sau đây.\r\n\r\nNếu bạn đang muốn cài đặt chương trình C, bạn cần phải sử dụng 2 phần mềm trên máy tính của bạn: (a) Chương trình soạn văn bản - Text Editor và (b) Bộ biên dịch C.\r\n\r\nText Editor\r\nĐược sử dụng để soạn thảo các chương trình. Ví dụ về một vài trình editor như Window Notepad, Notepad ++, vim hay vi…\r\n\r\nTên và các phiên bản của các trình editor có thể thay đổi theo các hệ điều hành. Ví dụ, Notepad được sử dụng trên Windows, hoặc vim hay vi được sử dụng trên Linux hoặc UNIX.\r\n\r\nCác file bạn tạo trong trình editor được gọi là source file (file nguồn) và chứa các chương trình code. Các file trong chương trình C thường được đặt tên với phần mở rộng \".c\".\r\n\r\nTrước khi bắt đầu chương trình của bạn, hãy chắc chắn bạn có một trình editor trên máy tính và bạn có đủ kinh nghiệm để viết các chương trình máy tính, lưu trữ trong file và thực thi nó.\r\n\r\nBộ biên dịch C\r\nMã nguồn được viết trong file nguồn dưới dạng có thể đọc được. Nó sẽ được biên dịch thành mã máy, để cho CPU có thể thực hiện các chương trình này dựa trên các lệnh được viết.\r\n\r\nBộ biên dịch được sử dụng để biên dịch mã nguồn (source code) của bạn đến chương trình có thể thực thi. Tôi giả sử bạn có kiến thức cơ bản về một bộ biên dịch ngôn ngữ lập trình.\r\n\r\nBộ biên dịch thông dụng nhất là bộ biên dịch GNU C/C++, mặt khác bạn có thể có các bộ biên dịch khác như HP hoặc Solaris với Hệ điều hành tương ứng.\r\n\r\nDưới đây là phần hướng dẫn giúp bạn cách cài đặt bộ biên dich GNU C/C++ trên các hệ điều hành khác nhau. Tôi đang đề cập đến C/C++ bởi vì bộ biên dịch GNU gcc hoạt động cho cả ngôn ngữ C và C++.\r\n\r\nCài đặt trên môi trường UNIX/Linux\r\nNếu bạn đang sử dụng Linux hoặc UNIX, bạn có thể kiểm tra bộ GCC đã được cài đặt trên môi trường của bạn chưa bằng lệnh sau đây:\r\n\r\n$ gcc -v\r\nNếu bạn có bộ cài đặt GNU trên máy tính của bạn, sau đó nó sẽ phản hồi một thông báo sau:\r\n\r\nUsing built-in specs.\r\nTarget: i386-redhat-linux\r\nConfigured with: ../configure --prefix=/usr .......\r\nThread model: posix\r\ngcc version 4.1.2 20080704 (Red Hat 4.1.2-46)\r\nNếu bộ GCC chưa được cài đặt, bạn có thể cài đặt nó với hướng dẫn trên đường link dưới đây: http://gcc.gnu.org/install/\r\n\r\nBài hướng dẫn này được viết dựa trên Linux và tất cả các ví dụ dược biên dịch trên Cent OS của hệ thống Linux.\r\n\r\nCài đặt trên môi trường Mac OS\r\nNếu bạn sử dụng hệ điều hành Mac OS X, cách đơn giản nhất để có GCC là download môi trường phát triển Xcode, bạn có thể sử dụng bộ biên dịch GNU cho C/C++.\r\n\r\nXcode được sẵn dưới link sau: developer.apple.com/technologies/tools/.\r\n\r\nCài đặt trên Windows\r\nĐể cài đặt GCC trên Windows bạn cần phải cài đặt MinGW. Để cài đặt MinGW, bạn truy cập vào www.mingw.org, và theo hướng dẫn trên trang download này. Download phiên bản mới nhất cho chương trình MinGW, dưới tên MinGW-<version>.exe.\r\n\r\nKhi cài đặt MinWG, ít nhất bạn phải cài đặt gcc-core, gcc-g++, binutils và MinGW runtime, nhưng bạn có thể cài đặt nhiều hơn.\r\n\r\nThêm thư mục con bin trong nơi cài đặt MinGW vào biến môi trường PATH của bạn, bạn có thể sử dụng trực tiếp các công cụ dưới dạng command line một các dễ dàng.\r\n\r\nKhi quá trình cài đặt hoàn tất, bạn có thể chạy gcc, g++, ar, ranlib, dlltool và các công cụ GNU khác trên Windows command line.', '2021-11-07 14:42:44', 0),
(NULL, 16, 1, 1, 'Cấu trúc chương trình C', 'Trước khi chúng ta nghiên cứu về các khối tạo nên một chương trình C, đầu tiên bạn hãy xem một chương trình C mẫu.\r\n\r\nChương trình C: Hello World\r\nMột chương trình C bao gồm những phần sau đây:\r\n\r\nCác lệnh tiền xử lý\r\n\r\nCác hàm\r\n\r\nCác biến\r\n\r\nCác lệnh và biểu thức\r\n\r\nCác comment\r\n\r\nĐầu tiên hãy xem đoạn code đơn giản mà sẽ in ra màn hình hai từ \"Hello World\":\r\n\r\n#include <stdio.h>\r\n\r\nint main()\r\n{\r\n   /* Day la chuong trinh C dau tien */\r\n   printf(\"Hello, World! \\n\");\r\n   \r\n   return 0;\r\n}\r\nHãy xem các phần của chương trình bên trên:\r\n\r\nDòng đầu tiên của chương trình #include <stdio.h> là lệnh tiền xử lý, nhắc nhở bộ biên dịch C thêm tệp stdio.h trước khi biên dịch.\r\n\r\nDòng tiếp theo int main() là hàm main, nơi chương trình bắt đầu.\r\n\r\nDòng tiếp theo /*...*/ là dòng comment được bỏ qua bởi bộ biên dịch compiler và được dùng để thêm các chú thích cho chương trình. Đây được gọi là phần comment của chương trình.\r\n\r\nDòng tiếp theo printf(...) là một hàm chức năng khác của ngôn ngữ C , in ra thông điệp \"Hello, World!\" hiển thị trên màn hình.\r\n\r\nDòng tiếp theo return 0; kết thúc hàm chính và trả về giá trị 0.\r\n\r\nBiên dịch & Thực thi Chương trình C\r\n1. Nếu bạn sử dụng Dev-C++, Microsoft Visual Studio, ... thì bạn mở ứng dụng, vào File, chọn New để tạo một source file mới. Sau đó sao chép code trên vào source file mới này. Với Dev-C++, bạn sử dụng Complile & Run để biên dịch và chạy chương trình. Với Microsoft Visual Studio, bạn thực hiện tương tự và sau đó sử dụng Build để biên dịch và thực thi.\r\n\r\n2. Nếu bạn dùng command prompt để biên dịch, bạn theo các bước sau:\r\n\r\nMở một trình editor và thêm dòng code ở trên.\r\n\r\nLưu tệp dưới dạng hello.c\r\n\r\nMở dòng nhắc lệnh và đi tới thư mục lưu trữ file.\r\n\r\nSoạn thảo gcc hello.c và nhấn Enter để biên dịch dòng code trên.\r\n\r\nNếu không có lỗi trên đoạn code bên trên, dòng nhắc lệnh sẽ đưa bạn đến dòng tiếp theo và tạo ra file a.out có thể thực thi.\r\n\r\nBây giờ, soạn thảo a.out để thực hiện chương trình này.\r\n\r\nBây giờ bạn sẽ thấy dòng chữ \"Hello, World\" được in trên màn hình.\r\n\r\n$ gcc hello.c\r\n$ ./a.out\r\nHello, World!\r\nBạn phải chắc chắn bộ biên dịch gcc được cài đặt trên máy tính của bạn và bạn đang chạy nó trong thư mục chứa file nguồn hello.c.', '2021-11-08 14:42:44', 0),
('public\\user\\admin\\source\\admin_post1.c', 17, 1, 1, 'Cài công cụ để lập trình C', 'Cài đặt IDE để biên dịch và thực thi C\r\nCó một số IDE có sẵn và miễn phí để biên dịch và thực thi các chương trình C. Bạn có thể chọn Dev-C++, Code:: Blocks, hoặc Turbo C. Tuy nhiên, lựa chọn phổ biến nhất và hay được sử dụng nhất là Dev-C++ và các chương trình C trong loạt bài này cũng được biên dịch và thực thi trong Dev-C++.\r\n\r\nBạn truy cập theo link sau để tải Dev-C++: Tải Dev-C++. Trên trang này cũng bao gồm cả Code:: Blocks. Sau khi bạn tải xong, để cài đặt IDE này, bạn chỉ cần vào Google và gõ \"cài đặt dev-c++\" là có rất nhiều video hướng dẫn chi tiết, cho nên mình không cần trình bày thêm nữa.\r\n\r\nSau khi đã cài đặt xong, để biên dịch và thực thi một chương trình C, bạn: (a) vào File -> New -> Project -> Console Application -> C project, sau đó nhập tên vào hoặc (b) File -> New -> Source File. Cuối cùng, sao chép và dán chương trình C vào file bạn vừa tạo. Để biên dịch và thực thi, chọn Execute -> Compile & Run.\r\n\r\nCài đặt để chạy trên Command Prompt\r\nNếu bạn muốn cài đặt để biên dịch và chạy trên Command Prompt, thì bạn nên đọc phần sau đây.\r\n\r\nNếu bạn đang muốn cài đặt chương trình C, bạn cần phải sử dụng 2 phần mềm trên máy tính của bạn: (a) Chương trình soạn văn bản - Text Editor và (b) Bộ biên dịch C.\r\n\r\nText Editor\r\nĐược sử dụng để soạn thảo các chương trình. Ví dụ về một vài trình editor như Window Notepad, Notepad ++, vim hay vi…\r\n\r\nTên và các phiên bản của các trình editor có thể thay đổi theo các hệ điều hành. Ví dụ, Notepad được sử dụng trên Windows, hoặc vim hay vi được sử dụng trên Linux hoặc UNIX.\r\n\r\nCác file bạn tạo trong trình editor được gọi là source file (file nguồn) và chứa các chương trình code. Các file trong chương trình C thường được đặt tên với phần mở rộng \".c\".\r\n\r\nTrước khi bắt đầu chương trình của bạn, hãy chắc chắn bạn có một trình editor trên máy tính và bạn có đủ kinh nghiệm để viết các chương trình máy tính, lưu trữ trong file và thực thi nó.\r\n\r\nBộ biên dịch C\r\nMã nguồn được viết trong file nguồn dưới dạng có thể đọc được. Nó sẽ được biên dịch thành mã máy, để cho CPU có thể thực hiện các chương trình này dựa trên các lệnh được viết.\r\n\r\nBộ biên dịch được sử dụng để biên dịch mã nguồn (source code) của bạn đến chương trình có thể thực thi. Tôi giả sử bạn có kiến thức cơ bản về một bộ biên dịch ngôn ngữ lập trình.\r\n\r\nBộ biên dịch thông dụng nhất là bộ biên dịch GNU C/C++, mặt khác bạn có thể có các bộ biên dịch khác như HP hoặc Solaris với Hệ điều hành tương ứng.\r\n\r\nDưới đây là phần hướng dẫn giúp bạn cách cài đặt bộ biên dich GNU C/C++ trên các hệ điều hành khác nhau. Tôi đang đề cập đến C/C++ bởi vì bộ biên dịch GNU gcc hoạt động cho cả ngôn ngữ C và C++.\r\n\r\nCài đặt trên môi trường UNIX/Linux\r\nNếu bạn đang sử dụng Linux hoặc UNIX, bạn có thể kiểm tra bộ GCC đã được cài đặt trên môi trường của bạn chưa bằng lệnh sau đây:\r\n\r\n$ gcc -v\r\nNếu bạn có bộ cài đặt GNU trên máy tính của bạn, sau đó nó sẽ phản hồi một thông báo sau:\r\n\r\nUsing built-in specs.\r\nTarget: i386-redhat-linux\r\nConfigured with: ../configure --prefix=/usr .......\r\nThread model: posix\r\ngcc version 4.1.2 20080704 (Red Hat 4.1.2-46)\r\nNếu bộ GCC chưa được cài đặt, bạn có thể cài đặt nó với hướng dẫn trên đường link dưới đây: http://gcc.gnu.org/install/\r\n\r\nBài hướng dẫn này được viết dựa trên Linux và tất cả các ví dụ dược biên dịch trên Cent OS của hệ thống Linux.\r\n\r\nCài đặt trên môi trường Mac OS\r\nNếu bạn sử dụng hệ điều hành Mac OS X, cách đơn giản nhất để có GCC là download môi trường phát triển Xcode, bạn có thể sử dụng bộ biên dịch GNU cho C/C++.\r\n\r\nXcode được sẵn dưới link sau: developer.apple.com/technologies/tools/.\r\n\r\nCài đặt trên Windows\r\nĐể cài đặt GCC trên Windows bạn cần phải cài đặt MinGW. Để cài đặt MinGW, bạn truy cập vào www.mingw.org, và theo hướng dẫn trên trang download này. Download phiên bản mới nhất cho chương trình MinGW, dưới tên MinGW-<version>.exe.\r\n\r\nKhi cài đặt MinWG, ít nhất bạn phải cài đặt gcc-core, gcc-g++, binutils và MinGW runtime, nhưng bạn có thể cài đặt nhiều hơn.\r\n\r\nThêm thư mục con bin trong nơi cài đặt MinGW vào biến môi trường PATH của bạn, bạn có thể sử dụng trực tiếp các công cụ dưới dạng command line một các dễ dàng.\r\n\r\nKhi quá trình cài đặt hoàn tất, bạn có thể chạy gcc, g++, ar, ranlib, dlltool và các công cụ GNU khác trên Windows command line.', '2021-11-07 14:42:44', 0),
(NULL, 18, 1, 1, 'Cấu trúc chương trình C', 'Trước khi chúng ta nghiên cứu về các khối tạo nên một chương trình C, đầu tiên bạn hãy xem một chương trình C mẫu.\r\n\r\nChương trình C: Hello World\r\nMột chương trình C bao gồm những phần sau đây:\r\n\r\nCác lệnh tiền xử lý\r\n\r\nCác hàm\r\n\r\nCác biến\r\n\r\nCác lệnh và biểu thức\r\n\r\nCác comment\r\n\r\nĐầu tiên hãy xem đoạn code đơn giản mà sẽ in ra màn hình hai từ \"Hello World\":\r\n\r\n#include <stdio.h>\r\n\r\nint main()\r\n{\r\n   /* Day la chuong trinh C dau tien */\r\n   printf(\"Hello, World! \\n\");\r\n   \r\n   return 0;\r\n}\r\nHãy xem các phần của chương trình bên trên:\r\n\r\nDòng đầu tiên của chương trình #include <stdio.h> là lệnh tiền xử lý, nhắc nhở bộ biên dịch C thêm tệp stdio.h trước khi biên dịch.\r\n\r\nDòng tiếp theo int main() là hàm main, nơi chương trình bắt đầu.\r\n\r\nDòng tiếp theo /*...*/ là dòng comment được bỏ qua bởi bộ biên dịch compiler và được dùng để thêm các chú thích cho chương trình. Đây được gọi là phần comment của chương trình.\r\n\r\nDòng tiếp theo printf(...) là một hàm chức năng khác của ngôn ngữ C , in ra thông điệp \"Hello, World!\" hiển thị trên màn hình.\r\n\r\nDòng tiếp theo return 0; kết thúc hàm chính và trả về giá trị 0.\r\n\r\nBiên dịch & Thực thi Chương trình C\r\n1. Nếu bạn sử dụng Dev-C++, Microsoft Visual Studio, ... thì bạn mở ứng dụng, vào File, chọn New để tạo một source file mới. Sau đó sao chép code trên vào source file mới này. Với Dev-C++, bạn sử dụng Complile & Run để biên dịch và chạy chương trình. Với Microsoft Visual Studio, bạn thực hiện tương tự và sau đó sử dụng Build để biên dịch và thực thi.\r\n\r\n2. Nếu bạn dùng command prompt để biên dịch, bạn theo các bước sau:\r\n\r\nMở một trình editor và thêm dòng code ở trên.\r\n\r\nLưu tệp dưới dạng hello.c\r\n\r\nMở dòng nhắc lệnh và đi tới thư mục lưu trữ file.\r\n\r\nSoạn thảo gcc hello.c và nhấn Enter để biên dịch dòng code trên.\r\n\r\nNếu không có lỗi trên đoạn code bên trên, dòng nhắc lệnh sẽ đưa bạn đến dòng tiếp theo và tạo ra file a.out có thể thực thi.\r\n\r\nBây giờ, soạn thảo a.out để thực hiện chương trình này.\r\n\r\nBây giờ bạn sẽ thấy dòng chữ \"Hello, World\" được in trên màn hình.\r\n\r\n$ gcc hello.c\r\n$ ./a.out\r\nHello, World!\r\nBạn phải chắc chắn bộ biên dịch gcc được cài đặt trên máy tính của bạn và bạn đang chạy nó trong thư mục chứa file nguồn hello.c.', '2021-11-08 14:42:44', 0),
('public\\user\\admin\\source\\admin_post1.c', 19, 1, 1, 'Cài công cụ để lập trình C', 'Cài đặt IDE để biên dịch và thực thi C\r\nCó một số IDE có sẵn và miễn phí để biên dịch và thực thi các chương trình C. Bạn có thể chọn Dev-C++, Code:: Blocks, hoặc Turbo C. Tuy nhiên, lựa chọn phổ biến nhất và hay được sử dụng nhất là Dev-C++ và các chương trình C trong loạt bài này cũng được biên dịch và thực thi trong Dev-C++.\r\n\r\nBạn truy cập theo link sau để tải Dev-C++: Tải Dev-C++. Trên trang này cũng bao gồm cả Code:: Blocks. Sau khi bạn tải xong, để cài đặt IDE này, bạn chỉ cần vào Google và gõ \"cài đặt dev-c++\" là có rất nhiều video hướng dẫn chi tiết, cho nên mình không cần trình bày thêm nữa.\r\n\r\nSau khi đã cài đặt xong, để biên dịch và thực thi một chương trình C, bạn: (a) vào File -> New -> Project -> Console Application -> C project, sau đó nhập tên vào hoặc (b) File -> New -> Source File. Cuối cùng, sao chép và dán chương trình C vào file bạn vừa tạo. Để biên dịch và thực thi, chọn Execute -> Compile & Run.\r\n\r\nCài đặt để chạy trên Command Prompt\r\nNếu bạn muốn cài đặt để biên dịch và chạy trên Command Prompt, thì bạn nên đọc phần sau đây.\r\n\r\nNếu bạn đang muốn cài đặt chương trình C, bạn cần phải sử dụng 2 phần mềm trên máy tính của bạn: (a) Chương trình soạn văn bản - Text Editor và (b) Bộ biên dịch C.\r\n\r\nText Editor\r\nĐược sử dụng để soạn thảo các chương trình. Ví dụ về một vài trình editor như Window Notepad, Notepad ++, vim hay vi…\r\n\r\nTên và các phiên bản của các trình editor có thể thay đổi theo các hệ điều hành. Ví dụ, Notepad được sử dụng trên Windows, hoặc vim hay vi được sử dụng trên Linux hoặc UNIX.\r\n\r\nCác file bạn tạo trong trình editor được gọi là source file (file nguồn) và chứa các chương trình code. Các file trong chương trình C thường được đặt tên với phần mở rộng \".c\".\r\n\r\nTrước khi bắt đầu chương trình của bạn, hãy chắc chắn bạn có một trình editor trên máy tính và bạn có đủ kinh nghiệm để viết các chương trình máy tính, lưu trữ trong file và thực thi nó.\r\n\r\nBộ biên dịch C\r\nMã nguồn được viết trong file nguồn dưới dạng có thể đọc được. Nó sẽ được biên dịch thành mã máy, để cho CPU có thể thực hiện các chương trình này dựa trên các lệnh được viết.\r\n\r\nBộ biên dịch được sử dụng để biên dịch mã nguồn (source code) của bạn đến chương trình có thể thực thi. Tôi giả sử bạn có kiến thức cơ bản về một bộ biên dịch ngôn ngữ lập trình.\r\n\r\nBộ biên dịch thông dụng nhất là bộ biên dịch GNU C/C++, mặt khác bạn có thể có các bộ biên dịch khác như HP hoặc Solaris với Hệ điều hành tương ứng.\r\n\r\nDưới đây là phần hướng dẫn giúp bạn cách cài đặt bộ biên dich GNU C/C++ trên các hệ điều hành khác nhau. Tôi đang đề cập đến C/C++ bởi vì bộ biên dịch GNU gcc hoạt động cho cả ngôn ngữ C và C++.\r\n\r\nCài đặt trên môi trường UNIX/Linux\r\nNếu bạn đang sử dụng Linux hoặc UNIX, bạn có thể kiểm tra bộ GCC đã được cài đặt trên môi trường của bạn chưa bằng lệnh sau đây:\r\n\r\n$ gcc -v\r\nNếu bạn có bộ cài đặt GNU trên máy tính của bạn, sau đó nó sẽ phản hồi một thông báo sau:\r\n\r\nUsing built-in specs.\r\nTarget: i386-redhat-linux\r\nConfigured with: ../configure --prefix=/usr .......\r\nThread model: posix\r\ngcc version 4.1.2 20080704 (Red Hat 4.1.2-46)\r\nNếu bộ GCC chưa được cài đặt, bạn có thể cài đặt nó với hướng dẫn trên đường link dưới đây: http://gcc.gnu.org/install/\r\n\r\nBài hướng dẫn này được viết dựa trên Linux và tất cả các ví dụ dược biên dịch trên Cent OS của hệ thống Linux.\r\n\r\nCài đặt trên môi trường Mac OS\r\nNếu bạn sử dụng hệ điều hành Mac OS X, cách đơn giản nhất để có GCC là download môi trường phát triển Xcode, bạn có thể sử dụng bộ biên dịch GNU cho C/C++.\r\n\r\nXcode được sẵn dưới link sau: developer.apple.com/technologies/tools/.\r\n\r\nCài đặt trên Windows\r\nĐể cài đặt GCC trên Windows bạn cần phải cài đặt MinGW. Để cài đặt MinGW, bạn truy cập vào www.mingw.org, và theo hướng dẫn trên trang download này. Download phiên bản mới nhất cho chương trình MinGW, dưới tên MinGW-<version>.exe.\r\n\r\nKhi cài đặt MinWG, ít nhất bạn phải cài đặt gcc-core, gcc-g++, binutils và MinGW runtime, nhưng bạn có thể cài đặt nhiều hơn.\r\n\r\nThêm thư mục con bin trong nơi cài đặt MinGW vào biến môi trường PATH của bạn, bạn có thể sử dụng trực tiếp các công cụ dưới dạng command line một các dễ dàng.\r\n\r\nKhi quá trình cài đặt hoàn tất, bạn có thể chạy gcc, g++, ar, ranlib, dlltool và các công cụ GNU khác trên Windows command line.', '2021-11-07 14:42:44', 0),
(NULL, 20, 1, 1, 'Cấu trúc chương trình C', 'Trước khi chúng ta nghiên cứu về các khối tạo nên một chương trình C, đầu tiên bạn hãy xem một chương trình C mẫu.\r\n\r\nChương trình C: Hello World\r\nMột chương trình C bao gồm những phần sau đây:\r\n\r\nCác lệnh tiền xử lý\r\n\r\nCác hàm\r\n\r\nCác biến\r\n\r\nCác lệnh và biểu thức\r\n\r\nCác comment\r\n\r\nĐầu tiên hãy xem đoạn code đơn giản mà sẽ in ra màn hình hai từ \"Hello World\":\r\n\r\n#include <stdio.h>\r\n\r\nint main()\r\n{\r\n   /* Day la chuong trinh C dau tien */\r\n   printf(\"Hello, World! \\n\");\r\n   \r\n   return 0;\r\n}\r\nHãy xem các phần của chương trình bên trên:\r\n\r\nDòng đầu tiên của chương trình #include <stdio.h> là lệnh tiền xử lý, nhắc nhở bộ biên dịch C thêm tệp stdio.h trước khi biên dịch.\r\n\r\nDòng tiếp theo int main() là hàm main, nơi chương trình bắt đầu.\r\n\r\nDòng tiếp theo /*...*/ là dòng comment được bỏ qua bởi bộ biên dịch compiler và được dùng để thêm các chú thích cho chương trình. Đây được gọi là phần comment của chương trình.\r\n\r\nDòng tiếp theo printf(...) là một hàm chức năng khác của ngôn ngữ C , in ra thông điệp \"Hello, World!\" hiển thị trên màn hình.\r\n\r\nDòng tiếp theo return 0; kết thúc hàm chính và trả về giá trị 0.\r\n\r\nBiên dịch & Thực thi Chương trình C\r\n1. Nếu bạn sử dụng Dev-C++, Microsoft Visual Studio, ... thì bạn mở ứng dụng, vào File, chọn New để tạo một source file mới. Sau đó sao chép code trên vào source file mới này. Với Dev-C++, bạn sử dụng Complile & Run để biên dịch và chạy chương trình. Với Microsoft Visual Studio, bạn thực hiện tương tự và sau đó sử dụng Build để biên dịch và thực thi.\r\n\r\n2. Nếu bạn dùng command prompt để biên dịch, bạn theo các bước sau:\r\n\r\nMở một trình editor và thêm dòng code ở trên.\r\n\r\nLưu tệp dưới dạng hello.c\r\n\r\nMở dòng nhắc lệnh và đi tới thư mục lưu trữ file.\r\n\r\nSoạn thảo gcc hello.c và nhấn Enter để biên dịch dòng code trên.\r\n\r\nNếu không có lỗi trên đoạn code bên trên, dòng nhắc lệnh sẽ đưa bạn đến dòng tiếp theo và tạo ra file a.out có thể thực thi.\r\n\r\nBây giờ, soạn thảo a.out để thực hiện chương trình này.\r\n\r\nBây giờ bạn sẽ thấy dòng chữ \"Hello, World\" được in trên màn hình.\r\n\r\n$ gcc hello.c\r\n$ ./a.out\r\nHello, World!\r\nBạn phải chắc chắn bộ biên dịch gcc được cài đặt trên máy tính của bạn và bạn đang chạy nó trong thư mục chứa file nguồn hello.c.', '2021-11-08 14:42:44', 0),
(NULL, 21, 2, 13, 'Lập trình python cơ bản', 'Bài đầu tiên trong loạt series học Python, chúng ta sẽ chỉ tìm hiểu sơ qua về python xem nó có gì đặc biệt không nhé?\r\n\r\nMục Lục\r\n1, Python là gì?\r\n2, Cài đặt Python.\r\n3, Chạy chương trình đầu tiên.\r\n4, Lời kết.\r\n1, Python là gì?\r\n-Python là một ngôn ngữ lập trình kịch bản (scripting language) do Guido van Rossum tạo ra năm 1990. Đến nay thì cộng đồng người sử dụng ngôn ngữ này rất đông, nếu so sánh từ bảng xếp hạng các ngôn ngữ năm 2016 thì Python đứng tứ 3 trong top 10 ngôn ngữ phổ biến nhất.\r\n\r\nthống kê top 10 ngôn ngữ 2016\r\n\r\nVà Python luôn được biết đến với các đặc điểm sau đâu: \r\n\r\nCú pháp rất tường minh, dễ đọc.\r\nCác khả năng tự xét mạnh mẽ.\r\nHướng đối tượng trực giác.\r\nCách thể hiện tự nhiên mã thủ tục.\r\nHoàn toàn mô-đun hóa, hỗ trợ các gói theo cấp bậc.\r\nXử lý lỗi dựa theo ngoại lệ.\r\nKiểu dữ liệu động ở mức rất cao.\r\nCác thư viện chuẩn và các mô-đun ngoài bao quát hầu như mọi việc.\r\nPhần mở rộng và mô-đun dễ dàng viết trong C, C++.\r\nCó thể nhúng trong ứng dụng như một giao diện kịch bản (scripting interface).\r\nPython mạnh mẽ và thực hiện rất nhanh.\r\n2, Cài đặt Python.\r\n-Python hỗ trợ hầu hết trên các hệ điều hành hiện nay, và cách cài đặt nó cũng rất đơn giản. Tuy nhiên ở bài này mình sẽ chỉ hướng dẫn mọi người cài đặt python trên môi trường window thôi.\r\n\r\nĐầu tiên chúng ta cần download bộ cài python từ trang chủ của nó (download). Ở đây mình chọn phiên bản mới nhất là phiên bản 3.6.1.', '2021-11-07 15:21:58', 0),
(NULL, 22, 2, 13, 'Lập trình python', 'Bài đầu tiên trong loạt series học Python, chúng ta sẽ chỉ tìm hiểu sơ qua về python xem nó có gì đặc biệt không nhé?\r\n\r\nMục Lục\r\n1, Python là gì?\r\n2, Cài đặt Python.\r\n3, Chạy chương trình đầu tiên.\r\n4, Lời kết.\r\n1, Python là gì?\r\n-Python là một ngôn ngữ lập trình kịch bản (scripting language) do Guido van Rossum tạo ra năm 1990. Đến nay thì cộng đồng người sử dụng ngôn ngữ này rất đông, nếu so sánh từ bảng xếp hạng các ngôn ngữ năm 2016 thì Python đứng tứ 3 trong top 10 ngôn ngữ phổ biến nhất.\r\n\r\nthống kê top 10 ngôn ngữ 2016\r\n\r\nVà Python luôn được biết đến với các đặc điểm sau đâu: \r\n\r\nCú pháp rất tường minh, dễ đọc.\r\nCác khả năng tự xét mạnh mẽ.\r\nHướng đối tượng trực giác.\r\nCách thể hiện tự nhiên mã thủ tục.\r\nHoàn toàn mô-đun hóa, hỗ trợ các gói theo cấp bậc.\r\nXử lý lỗi dựa theo ngoại lệ.\r\nKiểu dữ liệu động ở mức rất cao.\r\nCác thư viện chuẩn và các mô-đun ngoài bao quát hầu như mọi việc.\r\nPhần mở rộng và mô-đun dễ dàng viết trong C, C++.\r\nCó thể nhúng trong ứng dụng như một giao diện kịch bản (scripting interface).\r\nPython mạnh mẽ và thực hiện rất nhanh.\r\n2, Cài đặt Python.\r\n-Python hỗ trợ hầu hết trên các hệ điều hành hiện nay, và cách cài đặt nó cũng rất đơn giản. Tuy nhiên ở bài này mình sẽ chỉ hướng dẫn mọi người cài đặt python trên môi trường window thôi.\r\n\r\nĐầu tiên chúng ta cần download bộ cài python từ trang chủ của nó (download). Ở đây mình chọn phiên bản mới nhất là phiên bản 3.6.1.', '2021-11-05 15:21:58', 0);

-- --------------------------------------------------------

--
-- Table structure for table `question`
--

DROP TABLE IF EXISTS `question`;
CREATE TABLE IF NOT EXISTS `question` (
  `id_question` int NOT NULL AUTO_INCREMENT,
  `id_user` int DEFAULT NULL,
  `question_title` varchar(200) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,
  `question_conntent` text CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,
  `question_date_created` datetime NOT NULL,
  `question_views` int NOT NULL DEFAULT '0',
  PRIMARY KEY (`id_question`),
  KEY `id_user` (`id_user`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `question`
--

INSERT INTO `question` (`id_question`, `id_user`, `question_title`, `question_conntent`, `question_date_created`, `question_views`) VALUES
(1, 13, 'Ai giúp em bài này bằng Python được không ạ', 'Viết chương trình nhập vào 4 số nguyên a, b, x, y. Tính trung bình cộng các số chẵn trong đoạn [a, b], hoặc [b, a], tính trung bình cộng các số lẻ trong đoạn [x, y], hoặc [y, x].\r\n\r\nInput: \r\n\r\n- a, b trên cùng một dòng, cách nhau dấu cách.\r\n\r\n- x, y trên cùng một dòng, cách nhau dấu cách.\r\n\r\nVí dụ: \r\n\r\n5 12 \r\n\r\n30 -8\r\n\r\nOutput: \r\n\r\nDòng 1: Trung bình cộng các số chẵn tìm được hoặc \"NO\" nếu không tính được. \r\n\r\nDòng 1: Trung bình cộng các số lẻ tìm được hoặc \"NO\" nếu không tính được. \r\n\r\nVí dụ: \r\n\r\n30.00\r\n\r\nNO\r\n\r\nConstrains:\r\n\r\n+ các biến a, b, x, y kiểu nguyên.\r\n\r\n+ trung bình cộng có độ chính xác 2 chữ số thập phân.', '2021-10-30 07:35:20', 0),
(2, 13, 'Phương thức đệ quy', 'Em k hiểu cái phần code tính giai thừa này lắm :\'( các bác giúp e với \r\n \r\n<pre>\r\nusing System;\r\n\r\nnamespace Method {\r\n    class Program {\r\n        public static int Factorial(int n) {\r\n            if(n == 1) {\r\n                return 1;\r\n            }\r\n            return n * Factorial(n - 1);\r\n        }\r\n\r\n        static void Main(string[] args) {\r\n            int n = int.Parse(Console.ReadLine());\r\n            Console.WriteLine(Factorial(n));\r\n        }\r\n    }\r\n}\r\n</pre>', '2021-10-30 07:35:21', 0);

-- --------------------------------------------------------

--
-- Table structure for table `report`
--

DROP TABLE IF EXISTS `report`;
CREATE TABLE IF NOT EXISTS `report` (
  `id_report` int NOT NULL AUTO_INCREMENT,
  `id_user` int DEFAULT NULL,
  `id_post` int DEFAULT NULL,
  `id_question` int DEFAULT NULL,
  `report_content` varchar(100) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,
  PRIMARY KEY (`id_report`),
  KEY `id_user` (`id_user`),
  KEY `id_post` (`id_post`),
  KEY `id_question` (`id_question`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `tkhoan_cho`
--

DROP TABLE IF EXISTS `tkhoan_cho`;
CREATE TABLE IF NOT EXISTS `tkhoan_cho` (
  `name` varchar(100) COLLATE utf8_unicode_ci NOT NULL,
  `ma` varchar(100) COLLATE utf8_unicode_ci NOT NULL,
  `email` varchar(100) COLLATE utf8_unicode_ci NOT NULL,
  `pass` varchar(50) COLLATE utf8_unicode_ci NOT NULL,
  UNIQUE KEY `name` (`name`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `tkhoan_cho`
--

INSERT INTO `tkhoan_cho` (`name`, `ma`, `email`, `pass`) VALUES
('ongcaoboi232', '7HJTBNJoKQ', 'tuananha7iy@gmail.com', 'c4ca4238a0b923820dcc509a6f75849b'),
('ongcaoboi', 'TkfMOvjKa8', 'tuananha7iy@gmail.com', 'c4ca4238a0b923820dcc509a6f75849b');

-- --------------------------------------------------------

--
-- Table structure for table `topic`
--

DROP TABLE IF EXISTS `topic`;
CREATE TABLE IF NOT EXISTS `topic` (
  `id_topic` int NOT NULL AUTO_INCREMENT,
  `topic_name` varchar(100) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,
  PRIMARY KEY (`id_topic`)
) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `topic`
--

INSERT INTO `topic` (`id_topic`, `topic_name`) VALUES
(1, 'Lập trình C, C++'),
(2, 'Lập trình python'),
(3, 'HTML'),
(13, 'Java'),
(14, 'C#'),
(15, 'Git'),
(16, 'Vim'),
(17, 'Mysql'),
(18, 'SQL Server'),
(19, 'Lập trình Android');

-- --------------------------------------------------------

--
-- Table structure for table `userr`
--

DROP TABLE IF EXISTS `userr`;
CREATE TABLE IF NOT EXISTS `userr` (
  `id_user` int NOT NULL AUTO_INCREMENT,
  `user_name` varchar(100) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,
  `user_password` varchar(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,
  `user_display_name` varchar(100) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT NULL,
  `user_email` varchar(100) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,
  `user_position` int DEFAULT NULL,
  `user_status` int DEFAULT NULL,
  `user_date_create` datetime DEFAULT NULL,
  `user_image` text CHARACTER SET utf8 COLLATE utf8_unicode_ci,
  PRIMARY KEY (`id_user`),
  UNIQUE KEY `user_name` (`user_name`)
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `userr`
--

INSERT INTO `userr` (`id_user`, `user_name`, `user_password`, `user_display_name`, `user_email`, `user_position`, `user_status`, `user_date_create`, `user_image`) VALUES
(1, 'admin', 'c4ca4238a0b923820dcc509a6f75849b', 'Quản trị viên', '', 2, 1, '2021-10-14 09:18:21', 'public/img/e61df3c3768380ddd992.jpg'),
(13, 'ongcaoboi', 'c4ca4238a0b923820dcc509a6f75849b', NULL, 'tuananha7iy@gmail.com', 0, 1, '2021-10-28 15:43:12', './public/user/ongcaoboi/display_img/ongcaoboi.png'),
(15, 'tuananh', 'c4ca4238a0b923820dcc509a6f75849b', NULL, 'tuananhafiy@gmail.com', 0, 1, '2021-12-06 13:03:23', './public/user/tuananh/display_img/tuananh.png');

--
-- Constraints for dumped tables
--

--
-- Constraints for table `comments`
--
ALTER TABLE `comments`
  ADD CONSTRAINT `comments_ibfk_1` FOREIGN KEY (`id_user`) REFERENCES `userr` (`id_user`) ON DELETE CASCADE ON UPDATE CASCADE,
  ADD CONSTRAINT `comments_ibfk_2` FOREIGN KEY (`id_post`) REFERENCES `post` (`id_post`) ON DELETE CASCADE ON UPDATE CASCADE,
  ADD CONSTRAINT `comments_ibfk_3` FOREIGN KEY (`id_question`) REFERENCES `question` (`id_question`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Constraints for table `likes`
--
ALTER TABLE `likes`
  ADD CONSTRAINT `likes_ibfk_1` FOREIGN KEY (`id_user`) REFERENCES `userr` (`id_user`) ON DELETE SET NULL ON UPDATE CASCADE,
  ADD CONSTRAINT `likes_ibfk_2` FOREIGN KEY (`id_post`) REFERENCES `post` (`id_post`) ON DELETE SET NULL ON UPDATE CASCADE,
  ADD CONSTRAINT `likes_ibfk_3` FOREIGN KEY (`id_question`) REFERENCES `question` (`id_question`) ON DELETE SET NULL ON UPDATE CASCADE;

--
-- Constraints for table `post`
--
ALTER TABLE `post`
  ADD CONSTRAINT `post_ibfk_1` FOREIGN KEY (`id_topic`) REFERENCES `topic` (`id_topic`) ON DELETE SET NULL ON UPDATE CASCADE,
  ADD CONSTRAINT `post_ibfk_2` FOREIGN KEY (`id_user`) REFERENCES `userr` (`id_user`) ON DELETE SET NULL ON UPDATE CASCADE;

--
-- Constraints for table `question`
--
ALTER TABLE `question`
  ADD CONSTRAINT `question_ibfk_1` FOREIGN KEY (`id_user`) REFERENCES `userr` (`id_user`) ON DELETE SET NULL ON UPDATE CASCADE;

--
-- Constraints for table `report`
--
ALTER TABLE `report`
  ADD CONSTRAINT `report_ibfk_1` FOREIGN KEY (`id_user`) REFERENCES `userr` (`id_user`) ON DELETE SET NULL ON UPDATE CASCADE,
  ADD CONSTRAINT `report_ibfk_2` FOREIGN KEY (`id_post`) REFERENCES `post` (`id_post`) ON DELETE CASCADE ON UPDATE CASCADE,
  ADD CONSTRAINT `report_ibfk_3` FOREIGN KEY (`id_question`) REFERENCES `question` (`id_question`) ON DELETE CASCADE ON UPDATE CASCADE;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
